<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux</title>
      <link href="/2024/09/08/linux/"/>
      <url>/2024/09/08/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><blockquote><p><a href="https://blog.csdn.net/m0_67401382/article/details/124293671">https://blog.csdn.net/m0_67401382/article/details/124293671</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/SpringJavaMyBatis/article/details/134104301">https://blog.csdn.net/SpringJavaMyBatis/article/details/134104301</a></p></blockquote><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><p>pwd, ls, cd, mkdir, touch,cp, rm, mv, cat, more,less,echo,tail,&gt;|&gt;&gt;,In,history,时间日期</p><ul><li>pwd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd #显示当前工作目录的绝对路径</span><br></pre></td></tr></table></figure><ul><li>ls</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls #列出当前目录中的文件和子目录</span><br><span class="line">ls -l：以长格式列出当前目录中的文件和子目录，包括文件权限、所有者、文件大小、修改日期等详细信息。</span><br><span class="line">ls -a：列出当前目录中的所有文件和子目录，包括隐藏文件和目录。</span><br><span class="line">ls -h：以人类可读的格式列出文件大小，例如，使用KB、MB、GB等单位。</span><br><span class="line">ls -t：按修改时间排序列出文件和子目录，最新修改的文件和目录将显示在最上面。</span><br><span class="line">ls -r：反向排序列出文件和子目录，即从最后一个文件或目录开始列出。</span><br><span class="line">ls -R：递归列出当前目录及其子目录中的所有文件和子目录。</span><br><span class="line">ls -i：显示每个文件和目录的inode号码。</span><br></pre></td></tr></table></figure><ul><li>cd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd #切换目录 绝对路径|相对路径</span><br><span class="line">cd ~或cd #回到主目录</span><br><span class="line">cd - #回到上一次所在目录</span><br><span class="line">cd ..#回到当前目录的上一级目录</span><br><span class="line">cd -p#跳转到实际物理路径，非快捷方式路径</span><br></pre></td></tr></table></figure><ul><li>mkdir</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir sazki #创建目录</span><br><span class="line">mkdir -p sazki/test  # -p 创建多层目录</span><br><span class="line"></span><br><span class="line">rmdir sazki #删除目录</span><br></pre></td></tr></table></figure><ul><li>touch</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch xxx #创建文件</span><br></pre></td></tr></table></figure><ul><li>cp</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-a 复制目录并保留目录下的所有内容</span><br><span class="line">-d 复制时保留链接</span><br><span class="line">-f 覆盖已经存在的目标文件而不给出提示</span><br><span class="line">-i 与-f选项相反</span><br><span class="line">-p 复制文件内容，修改时间和访问权限</span><br><span class="line">-r 若给出的源文件是一个目录文件，复制改目录下的所有子目录和文件</span><br><span class="line">-l 不复制文件，只生成链接文件</span><br><span class="line"></span><br><span class="line">cp -r xxx/xx/  ./ #递归复制整个文件夹</span><br></pre></td></tr></table></figure><ul><li>rm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-i 删除前逐一询问确认</span><br><span class="line">-f 强制删除，无需确认</span><br><span class="line">-r 将目录及以下的递归删除</span><br></pre></td></tr></table></figure><ul><li>mv</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-i 若制定目录已有同名文件，先询问是否覆盖</span><br><span class="line">-f 不询问是否有同名文件</span><br></pre></td></tr></table></figure><ul><li>cat</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n xx.txt #查看文件内容，-n为行数</span><br></pre></td></tr></table></figure><ul><li>more</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">more xx #文件内容分屏查看</span><br><span class="line"></span><br><span class="line">空格 #向下翻页</span><br><span class="line">回车 #向下翻一行</span><br><span class="line">q    #立刻离开more，不再显示文件内容</span><br><span class="line">ctrl+f #向下滚动一屏</span><br><span class="line">ctrl+b #返回上一屏</span><br><span class="line">=    #输出当前的行号</span><br><span class="line">:f   #输出文件名和当前行的行号</span><br></pre></td></tr></table></figure><ul><li>less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</span><br><span class="line"></span><br><span class="line">空白键#向下翻动一页:</span><br><span class="line">[分页]#向下翻动一页</span><br><span class="line">[页面]#向上翻动一页;</span><br><span class="line">/字串#向下搜寻「字串」的功能:n:向下查找:N:向上查找:</span><br><span class="line">?字串#向上搜寻【字串】的功能:n:向上查找:N:向下查找:</span><br><span class="line">q #离开少这个程序;</span><br></pre></td></tr></table></figure><ul><li>echo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出内容到控制台</span><br><span class="line">-e支持反斜线控制的字符转换</span><br><span class="line">\\输出\本身</span><br><span class="line">\n换行</span><br><span class="line">\t制表符</span><br></pre></td></tr></table></figure><ul><li>tail</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出文件尾部内容，默认显示文件的后10行内容</span><br><span class="line"></span><br><span class="line">tail -n 1 ss.txt #查看文件尾部1行内容</span><br><span class="line">tail -f xx.txt #实时追踪该文档的所有更新 ctrl+s暂停 ctrl+q继续</span><br></pre></td></tr></table></figure><ul><li>&gt;和&gt;&gt;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;输出重定向</span><br><span class="line">&gt;&gt;追加</span><br><span class="line"></span><br><span class="line">ls -l&gt;xx.txt #将ls查看信息写入到文件中</span><br><span class="line">ls -l&gt;&gt;xx.txt #将ls查看信息追加到文件中</span><br><span class="line">echo hello&gt;&gt;xx.txt #采用echo将hello追加到文件中</span><br></pre></td></tr></table></figure><ul><li>ln</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ln -s [原文件或目录] [软链接名] #给原文件创建一个软链接</span><br><span class="line">符号链接也称为软链接，是将一个路径名链接到一个文件。软链接文件是一种特别类型的文件，它们是一个文本文件，文件内部只包含了被链接文件的路径名。</span><br><span class="line">ln -s /home/sazki/test3/2.txt ./ceshi</span><br><span class="line"></span><br><span class="line">rm 软链接名#删除软链接</span><br><span class="line">rm -rf 软链接名 #删除软链接，并删除对应源链接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ln  [原文件或目录] [软链接名]  #给原文件创建一个硬链接</span><br><span class="line">文件创建硬链接只能创建在同一磁盘或磁盘分区下，不能创建在不同的磁盘或磁盘分区。硬链接不占磁盘空间，且目录不能创建硬链接。通常用来备份数据</span><br><span class="line">ln /home/sazki/test3/2.txt ./ceshi</span><br></pre></td></tr></table></figure><ul><li>history</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history#查看已经执行过的历史命令</span><br><span class="line">history#清空历史记录</span><br></pre></td></tr></table></figure><ul><li>时间日期类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date#显示当前时间信息</span><br><span class="line">date -s “2024-6-20 15：17：18”#设置系统当前时间</span><br></pre></td></tr></table></figure><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><p>useradd,passwd,id,cat ect&#x2F;passwd,su,userdel,sudo,usermod,groupadd,groupdel,groupmod,cat &#x2F;etc&#x2F;group</p><ul><li>useradd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd sazki#添加用户sazki</span><br></pre></td></tr></table></figure><ul><li>passwd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd sazki#设置用户密码</span><br></pre></td></tr></table></figure><ul><li>id</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id sazki#查看用户是否存在</span><br></pre></td></tr></table></figure><ul><li>cat &#x2F;etc&#x2F;passwd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd  #查看创建了哪些用户</span><br></pre></td></tr></table></figure><ul><li>su</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su sazki#切换用户</span><br><span class="line">su - sazki   #切换用户并获取该用户的环境变量及执行权限</span><br></pre></td></tr></table></figure><ul><li>userdel</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel sazki#删除用户，保存用户主目录</span><br><span class="line">userdel -r sazki#删除用户，用户和用户主目录都删除</span><br></pre></td></tr></table></figure><ul><li>sudo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir module#设置用户具有root权限</span><br></pre></td></tr></table></figure><ul><li>usermod</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户组 用户名   #-g 修改用户的初始登录组，给定的组必须存在。默认组id 是1.</span><br><span class="line">usermod -g root sazki</span><br></pre></td></tr></table></figure><ul><li>groupadd</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd users #新增一个users组</span><br></pre></td></tr></table></figure><ul><li>groupdel</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel users #删除指定users组</span><br></pre></td></tr></table></figure><ul><li>groupmod</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n 新组名 旧组名</span><br><span class="line">groupmod -n users employers  #修改users组名为employers</span><br></pre></td></tr></table></figure><ul><li>cat &#x2F;etc&#x2F;group</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group#查看创建的组</span><br></pre></td></tr></table></figure><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><p><strong>文件属性</strong></p><p><img src="/../images/linux/a53a7e475a8b4c1794420f9397ba492c.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">使用ll或ls -lh查看权限</span><br><span class="line">如果没有权限，就会出现减号[ - ]而已。从左至右用0-9这些数字来表示:</span><br><span class="line"></span><br><span class="line">0 首位表示类型</span><br><span class="line">在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</span><br><span class="line">代表文件</span><br><span class="line">d 代表目录</span><br><span class="line">l 链接文档(link file)；</span><br><span class="line">第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</span><br><span class="line">第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</span><br><span class="line">第7-9位确定其他用户拥有该文件的权限 —Other</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 2 sazki sazki 4.0K Jun 20 14:01 test</span><br><span class="line">drwxr-xr-x 2 sazki sazki 4.0K Jun 20 13:35 test2</span><br><span class="line">drwxr-xr-x 2 sazki sazki 4.0K Jun 20 15:04 test3</span><br></pre></td></tr></table></figure><p><strong>rwx 作用文件和目录的不同解释</strong></p><p>（1）作用到文件：<br>[ r ]代表可读(read): 可以读取，查看<br>[ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前<br>[ x ]代表可执行(execute):可以被系统执行</p><p>（2）作用到目录：<br>[ r ]代表可读(read): 可以读取，ls查看目录内容<br>[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录<br>[ x ]代表可执行(execute):可以进入该目录</p><p><strong>权限修改</strong></p><p><img src="/../images/linux/099b2191769f4d4da5208983fe2d160e.png" alt="在这里插入图片描述"></p><p>权限修改方式有两种</p><p>第一种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chmod [&#123;ugoa&#125;&#123;+ - =&#125;&#123;rwx&#125;] 文件或目录</span><br><span class="line">u:所有者（user）        g:所有组(group)           o:其他人(other)        </span><br><span class="line">a:所有人(u、g、o 的总和)</span><br><span class="line">+号代表增加      -号代表取消     = 号代表直接赋予</span><br><span class="line"></span><br><span class="line">chmod u+x xxx.txt  #修改文件使其所属主用户具有执行权限</span><br><span class="line">chmod g+x xxx.txt#修改文件使其所属组用户具有执行权限</span><br><span class="line">chmod u-x,o+x xxx.txt#修改文件所属主用户执行权限，并使其他用户具有执行权限</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod [mode=421 ] [文件或目录]</span><br><span class="line">r=4         w=2        x=1       </span><br><span class="line">rwx=4+2+1=7</span><br><span class="line"></span><br><span class="line">chmod 777 xxx.txt #采用数字的方式，设置文件所有者、所属组、其他用户都具有可读、可写、可执行权限</span><br><span class="line">chmod -R 777 test/   #修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限。</span><br></pre></td></tr></table></figure><ul><li>chown</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown sazki xxx.txt#修改文件所有者</span><br><span class="line">chown -R sazki:sazki test/#递归改变文件所有者和所有组 </span><br></pre></td></tr></table></figure><ul><li>chgrp</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp [最终用户组] [文件或目录] （功能描述：改变文件或者目录的所属组）</span><br><span class="line">chgrp root xxx.txt#修改文件的所属组</span><br></pre></td></tr></table></figure><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><ul><li>find查找指定目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</span><br><span class="line">-name #按照名字模糊查找</span><br><span class="line">-user #查找属于指定用户的名所有文件</span><br><span class="line">-size #按照指定文件大小查找文件，单位有b块（512字节）、c字节、w字（2字节）、k千字节、M兆字节、G吉字节</span><br><span class="line"></span><br><span class="line">find -name &quot;ln*.txt&quot;#按名字模糊查找ln开头的txt文件</span><br><span class="line">find  test/ -name &quot;*.txt&quot;#按名字在test目录下模糊查找txt文件</span><br><span class="line"></span><br><span class="line">find opt/ -user sazki#查找/opt目录下，用户名称为-user的文件</span><br><span class="line"></span><br><span class="line">find /home -szie +204800#在/home目录下找到大于200m的文件（+n大于-n小于n等于）</span><br></pre></td></tr></table></figure><ul><li>locate快速定位文件路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻。</span><br><span class="line"></span><br><span class="line">由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">updatedb#更新locate数据库</span><br><span class="line">locate test#定位test路径</span><br></pre></td></tr></table></figure><ul><li>grep过滤查找及|管道符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理，可以前面查出来的东西传给管道符后端的处理，例如 ls | grep -n test</span><br><span class="line">grep是Linux系统中常用的文本搜索工具，可以在文件中查找指定的字符串或者正则表达式，并将匹配的行输出到终端或者文件中。</span><br><span class="line"></span><br><span class="line">#在文件中查找字符</span><br><span class="line">grep &quot;string&quot; filename#单个文件中查找</span><br><span class="line">grep &quot;string&quot; file1 file2 file3#多个文件中查找字符</span><br><span class="line">grep -i &quot;string&quot; filename #忽略大小写查找指定字符串</span><br><span class="line"></span><br><span class="line">grep -r &quot;string&quot; directory#在目录中递归查找指定字符串</span><br><span class="line">grep -n &quot;string&quot; filename#显示匹配行的行号</span><br><span class="line">grep -v &quot;string&quot; filename#反向产找不包含指定字符串的行</span><br><span class="line">grep &quot;string&quot; filename&gt;xxx.txt#将匹配的行输出到文件中</span><br></pre></td></tr></table></figure><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><ul><li>gzip&#x2F;gunzip压缩</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip xxx.txt#gzip压缩</span><br><span class="line">gunzipxxx.txt#gunzip压缩</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>（1）只能压缩文件不能压缩目录<br>（2）不保留原来的文件<br>（3）同时多个文件会产生多个压缩包</p><ul><li>zip&#x2F;unzip压缩</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以压缩目录且保留源文件。</span><br><span class="line"></span><br><span class="line">#zip压缩</span><br><span class="line">zip 压缩文件名.zip 源文件</span><br><span class="line">例如</span><br><span class="line">zip  xxx.zip xxx.txt#压缩文件</span><br><span class="line">zip -r xxx.zip xxx#-r 压缩文件夹</span><br><span class="line"></span><br><span class="line">#unzip压缩</span><br><span class="line">unzip xxx.zip#解压压缩包</span><br><span class="line">unzip xxx.zip -d /opt#-d 指定解压后文件的存放目录</span><br></pre></td></tr></table></figure><ul><li>tar打包</li></ul><p><img src="/../images/linux/3241bddc8e444bf8a3c9cf93d6ba7ad9.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf  打包的文件名.tar.gz  源文件</span><br><span class="line"></span><br><span class="line">#压缩文件</span><br><span class="line">tar -zcvf files.tar.gz file1.txt file2.txt#多个文件打包</span><br><span class="line">tar -zcvf target.tar.gz target/#打包文件夹</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">tar -zxvf files.tar.gz#解压到当前目录</span><br><span class="line">tar -zxvf target.tar.gz -C /opt#-C 解压到某个目录下</span><br></pre></td></tr></table></figure><h2 id="磁盘查看和分区类"><a href="#磁盘查看和分区类" class="headerlink" title="磁盘查看和分区类"></a>磁盘查看和分区类</h2><ul><li>du</li></ul><p><img src="/../images/linux/8be1ba17ac204062a92c4ec6e8164cd5.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看文件和目录占用的磁盘空间</span><br><span class="line">du 目录/文件 #显示目录下每个子目录的磁盘使用情况</span><br><span class="line">du -sh#查看当前文件总占用</span><br><span class="line">du -sh *#当前目录下所有文件磁盘占用</span><br><span class="line">du -sh /home/*#某文件夹下所有文件的磁盘占用</span><br><span class="line">du -csh /home/*#-c 显示总和</span><br></pre></td></tr></table></figure><ul><li>df</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h#查看磁盘空间使用情况</span><br></pre></td></tr></table></figure><ul><li>lsblk</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsblk#查看设备挂载情况</span><br><span class="line">lsblk -f#查看设备挂载情况，显示文件系统信息</span><br></pre></td></tr></table></figure><ul><li>mount&#x2F;umount</li></ul><p>语法：mount [-t vfstype] [-o options] device dir （功能描述：挂载设备）</p><p><img src="/../images/linux/668c07945e454bb1b9ec824f67c4ae72.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#挂载光盘镜像文件</span><br><span class="line">mkdir /mnt/cdrom/#建立挂载点</span><br><span class="line">mount -t iso9660 /dev/cdrom /mnt/cdrom/#设备/dev/cdrom 挂载到挂载点: /mnt/cdrom中</span><br><span class="line"></span><br><span class="line">#卸载光盘镜像文件</span><br><span class="line">umount /mnt/cdrom</span><br><span class="line"></span><br><span class="line">#设置开机自动挂载</span><br><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><p><img src="/../images/linux/4363304117bd4e66833a7e507d8929fd.png" alt="在这里插入图片描述"></p><ul><li>fdisk分区</li></ul><p>注意：该命令必须在 root 用户下才能使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l #查看磁盘分区详情</span><br><span class="line">fdisk 硬盘设备名 #对新增硬盘进行分区操作</span><br><span class="line"></span><br><span class="line">Linux 分区</span><br><span class="line">Device：分区序列</span><br><span class="line">Boot：引导</span><br><span class="line">Start：从X磁柱开始</span><br><span class="line">End：到Y磁柱结束</span><br><span class="line">Blocks：容量</span><br><span class="line">Id：分区类型ID</span><br><span class="line">System：分区类型</span><br><span class="line"></span><br><span class="line">分区操作按键说明</span><br><span class="line">m：显示命令列表</span><br><span class="line">p：显示当前磁盘分区</span><br><span class="line">n：新增分区</span><br><span class="line">w：写入分区信息并退出</span><br><span class="line">q：不保存分区信息直接退出</span><br></pre></td></tr></table></figure><h2 id="进程管理类"><a href="#进程管理类" class="headerlink" title="进程管理类"></a>进程管理类</h2><ul><li>ps</li></ul><p><img src="/../images/linux/aa8ee3e3a3254903ab123e10c923af6f.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#查看当前系统进程状态</span><br><span class="line"></span><br><span class="line">ps aux#显示所有用户的进程信息</span><br><span class="line">ps -ef#列出所有进程的详细信息，包括PID、PPID、CPU占用率、内存占用率</span><br><span class="line"></span><br><span class="line">ps aux 显示信息说明：</span><br><span class="line">USER：该进程是由哪个用户产生的</span><br><span class="line">PID：进程的 ID 号</span><br><span class="line">%CPU：该进程占用 CPU 资源的百分比，占用越高，进程越耗费资源；</span><br><span class="line">%MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源；</span><br><span class="line">VSZ：该进程占用虚拟内存的大小，单位 KB；</span><br><span class="line">RSS：该进程占用实际物理内存的大小，单位 KB；</span><br><span class="line">TTY：该进程是在哪个终端中运行的。对于 CentOS 来说，tty1 是图形化终端，</span><br><span class="line">tty2-tty6 是本地的字符界面终端。pts/0-255 代表虚拟终端。</span><br><span class="line">STAT：进程状态。常见的状态有：R：运行状态、S：睡眠状态、T：暂停状态、</span><br><span class="line">Z：僵尸状态、s：包含子进程、l：多线程、+：前台显示</span><br><span class="line">START：该进程的启动时间</span><br><span class="line">TIME：该进程占用 CPU 的运算时间，注意不是系统时间</span><br><span class="line">COMMAND：产生此进程的命令名</span><br><span class="line"></span><br><span class="line">ps -ef 显示信息说明：</span><br><span class="line">UID：用户 ID</span><br><span class="line">PID：进程 ID</span><br><span class="line">PPID：父进程 ID</span><br><span class="line">C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，</span><br><span class="line">执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高</span><br><span class="line">STIME：进程启动的时间</span><br><span class="line">TTY：完整的终端名称</span><br><span class="line">TIME：CPU 时间</span><br><span class="line">CMD：启动进程所用的命令和参数</span><br></pre></td></tr></table></figure><p><strong>配合grep查询Java进程，查出PID，可以根据PID杀掉进程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep java#显示所有用户的java进程</span><br><span class="line">ps -ef | grep java#显示java进程</span><br><span class="line"></span><br><span class="line">ps -ef | grep java服务名#显示指定java服务进程</span><br></pre></td></tr></table></figure><ul><li>kill终止进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#通过pid终止进程</span><br><span class="line">kill -9 5102#-9 表示强迫进程立即停止</span><br><span class="line"></span><br><span class="line">#通过进程名称杀死进程</span><br><span class="line">killall firefox#停止firefox进程</span><br><span class="line"></span><br><span class="line">#taskkill /f /pid 进程id#windows杀死进程方法</span><br></pre></td></tr></table></figure><ul><li>pstree查看进程树</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pstree -p#显示进程的pid</span><br><span class="line">pstree -u#显示进程的所属用户</span><br></pre></td></tr></table></figure><ul><li>top</li></ul><p><img src="/../images/linux/3029b96a7ee947b7bb7b48f9de41bc4a.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top#实时监控系统进程状态</span><br></pre></td></tr></table></figure><p><img src="/../images/linux/2f89aac1f7854d6eb5d76411e0f41ed5.png" alt="在这里插入图片描述"></p><p><img src="/../images/linux/image-20240621160438676.png" alt="image-20240621160438676"></p><p>进程状态信息说明</p><table><thead><tr><th align="left">名称</th><th>说明</th></tr></thead><tbody><tr><td align="left">任务队列16:04:24</td><td>系统当前时间</td></tr><tr><td align="left">up 1:08</td><td>系统的运行时间，本机已经运行了1h8分</td></tr><tr><td align="left">1user</td><td>当前登录了一个用户</td></tr><tr><td align="left">load average:0.00,0.00,0.00</td><td>系统在之前1分钟，5分钟，15分钟的平均负载。一般认为小于1h，负载较小。如果大于1，系统已经超出负荷。</td></tr><tr><td align="left">进程信息tasks:24 total</td><td>系统总进程数为24</td></tr><tr><td align="left">1running</td><td>正在运行的进程数为1</td></tr><tr><td align="left">23sleeping</td><td>睡眠中的进程数为23</td></tr><tr><td align="left">0stopped</td><td>停止的进程为0</td></tr><tr><td align="left">0zombie</td><td>僵尸进程。如果不是0，需要检查僵尸进程</td></tr><tr><td align="left">Cpu(s):0.0%us</td><td>用户模式占用的 CPU 百分比</td></tr><tr><td align="left">0.0%sy</td><td>系统模式占用的 CPU 百分比</td></tr><tr><td align="left">0.0%ni</td><td>改变过优先级的用户进程占用的 CPU 百分比</td></tr><tr><td align="left">100%id</td><td>空闲 CPU 的 CPU 百分比</td></tr><tr><td align="left">0.0%wa</td><td>等待输入&#x2F;输出的进程的占用 CPU百分比</td></tr><tr><td align="left">0.0%hi</td><td>硬中断请求服务占用的 CPU 百分比</td></tr><tr><td align="left">0.0%si</td><td>软中断请求服务占用的 CPU 百分比</td></tr><tr><td align="left">0.0%st</td><td>st(Steal time)虚拟时间百分比。就是当有虚拟机时，虚拟 CPU 等待实际 CPU的时间百分比</td></tr><tr><td align="left">物理内存Mem: 15902.4 total</td><td>物理内存的总量，单位KB</td></tr><tr><td align="left">14765.6 free</td><td>空闲的物理内存数量，目前空闲的有14.7MB</td></tr><tr><td align="left">667.7 used</td><td>已经使用的物理内存数量</td></tr><tr><td align="left">739.8 buff&#x2F;cache</td><td>作为缓冲的内存数量</td></tr><tr><td align="left">交换分区Swap:4096.0 tota1</td><td>交换分区的总大小，也就是虚拟内存大小</td></tr><tr><td align="left">4096.0 free</td><td>空闲的交换分区的大小</td></tr><tr><td align="left">0.0 used</td><td>已经使用的</td></tr><tr><td align="left">15234.7 avai1 Mem</td><td>应用程序可以申请到的内存</td></tr></tbody></table><ul><li>netstat</li></ul><p><img src="/../images/linux/3593f83a130943a8b82ebb7b49820af6.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#显示网络状态和端口占用信息</span><br><span class="line">netstat -anp | grep进程号或端口号#显示指定进程号或端口号在监听和未监听的服务状态</span><br><span class="line">netstat -nlp | grep 端口号   #显示指定端口号在监听的服务状态</span><br><span class="line"></span><br><span class="line">#netstat -ano | findstr 端口号  #windows查看端口服务状态</span><br></pre></td></tr></table></figure><ul><li>crontab</li></ul><p><img src="/../images/linux/ade26cc0653b45b58bd0505b6be567c7.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定时任务设置</span><br><span class="line">crontab -e#编辑定时任务</span><br><span class="line">systemctl restart crond#重新启动crond服务</span><br><span class="line">*/1 * * * * /bin/echo &quot;11&quot; &gt;&gt; /root/xxx.txt#每隔1分钟，向/root/xxx.txt文件中添加“11”的字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok</title>
      <link href="/2024/06/27/lombok/"/>
      <url>/2024/06/27/lombok/</url>
      
        <content type="html"><![CDATA[<h1 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h1><blockquote><p><a href="https://www.cnblogs.com/forestwolf/p/17732667.html">https://www.cnblogs.com/forestwolf/p/17732667.html</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/m0_58719994/article/details/128128389">https://blog.csdn.net/m0_58719994/article/details/128128389</a></p></blockquote><p>在java 开发中，常常需要编写大量的getter、setter方法、equals和hashCode方法、构造函数等重复且繁琐的代码。</p><p>为了减少 Java 代码中的冗余和样板代码，提高代码的可读性和开发效率，就有了Lombok的出现。</p><p>Lombok是一个 Java 库，它通过使用注解来简化 Java 代码的编写。它提供了一系列的注解，用于自动生成常见的代码，如getter和setter方法、构造函数、equals和hashCode方法等，以减少开发者的重复劳动。</p><p>使用Lombok，开发者只需在 Java 类上添加相应的注解，而不需要手动编写相应的代码。在编译过程中，Lombok会根据这些注解自动生成对应的代码，减少代码中的冗余和样板代码以及简化代码的编写过程。</p><p>使用Lombok可以提高代码的可读性、简洁性和可维护性，让开发者能够更专注于业务逻辑的实现。</p><h2 id="lombok注解"><a href="#lombok注解" class="headerlink" title="lombok注解"></a>lombok注解</h2><ul><li>@Getter、@Setter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给类下的所有属性添加Setter/Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">//给id属性添加Setter</span></span><br><span class="line">  <span class="meta">@Setter</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="comment">//给username的setter方法设置私有权限</span></span><br><span class="line">  <span class="meta">@Setter(AccessLevel.PRIVATE)</span></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="comment">//取消password的Getter方法</span></span><br><span class="line">  <span class="meta">@Getter(AccessLevel.NONE)</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>static修饰的变量不生成getter和setter方法</li><li>final修饰的变量只生成getter方法</li></ol><ul><li>@ToString</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">// 给User2设置一个toString的方法，不显示password的值</span><br><span class="line">@ToString(exclude = &#123;&quot;password&quot;&#125;) </span><br><span class="line">public class User2 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@EquelsAndHashCode比较两个对象是否相等</li></ul><p>在Java中，调用equals()可以判断两个对象是否相等。如果类不重写 该方法，则判断两个引用是否指向同一个对象。</p><p>如何重写equals()：</p><p>1、判断两个引用是否指向同一对象</p><p>2、判断引用是否为Null</p><p>3、判断两个对象的实际类型是否相等，此时需要调用canEqual()</p><p>4、判断两个对象的属性是否相等<br>而在Set中判断对象是否重复，在调用equals()之前，需要先调用 hashCode()计算hash值。所以判断对象相等需要重写equals()、 canEqual()、hashCode()三个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(of = &#123;&quot;username&quot;&#125;)</span></span><br><span class="line"><span class="comment">//exclude： 比较时排除一些属性，of： 比较时只使用一些属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NonNull表示属性或方法参数不能为Null</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//放在方法前或者属性上方</span><br><span class="line">@Setter</span><br><span class="line">@Getter</span><br><span class="line">public class User4 &#123;</span><br><span class="line">    // 调用构造方法或setter给id赋值时，值不能为null</span><br><span class="line">    @NonNull</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    // 调用sleep方法时，time参数不能为null</span><br><span class="line">    public void sleep(@NonNull Integer time)</span><br><span class="line">   &#123;</span><br><span class="line">        System.out.println(&quot;睡觉&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 测试</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class UserTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testUser() &#123;</span><br><span class="line">        User4 user = new User4();</span><br><span class="line">        user.setId(null);</span><br><span class="line">        user.sleep(null);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NoArgsConstructor</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//生成无参构造方法</span><br></pre></td></tr></table></figure><ul><li>RequiredArgsConstructor</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//生成包含final和@NonNull修饰的属性的构造方法</span><br></pre></td></tr></table></figure><ul><li>AllArgsConstructor</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//生成全参的构造方法</span><br></pre></td></tr></table></figure><ul><li>Data</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//相当于同时添加@Setter、@Getter、@ToString、@EqualsAndHashCode、@RequiredArgsConstructor五个注解</span><br></pre></td></tr></table></figure><ul><li>Builder</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//提供链式风格创建对象</span><br><span class="line">// 同时提供@Setter、@Getter、@ToString、</span><br><span class="line">@EqualsAndHashCode、@RequiredArgsConstructor</span><br><span class="line">@Data</span><br><span class="line">// 提供链式风格创建对象</span><br><span class="line">@Builder</span><br><span class="line">public class User6 &#123;</span><br><span class="line">    @NonNull</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br><span class="line">// 测试</span><br><span class="line">@Test</span><br><span class="line">public void testUser() &#123;</span><br><span class="line">    User6 user6 = User6.builder()</span><br><span class="line">       .id(1)</span><br><span class="line">       .username(&quot;itbaizhan&quot;)</span><br><span class="line">       .password(&quot;itbaizhan&quot;)</span><br><span class="line">       .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Builder 注解是 Lombok 提供的一种注解，用于简化构建对象的过程。通过在类上添加 </p><p>@Builder 注解，可以自动生成一个建造者模式相关的代码，使得对象的构建更加简洁和易读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line">@Builder</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person person = Person.builder()</span><br><span class="line">                      .name(&quot;张三&quot;)</span><br><span class="line">                      .age(25)</span><br><span class="line">                      .address(&quot;北京&quot;)</span><br><span class="line">                      .build();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Log</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类中生成日志对象，在方法中可以直接使用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">生成log对象，用于记录日志，可以通过topic属性来设置getLogger(String name)方法的参数 例如 <span class="doctag">@Log</span>4j(topic = “com.xxx.entity.User”)，默认是类的全限定名，即 类名.class，log支持以下几种：</span></span><br><span class="line"><span class="comment"><span class="doctag">@Log</span> java.util.logging.Logger</span></span><br><span class="line"><span class="comment"><span class="doctag">@Log</span>4j org.apache.log4j.Logger</span></span><br><span class="line"><span class="comment"><span class="doctag">@Log</span>4j2 org.apache.logging.log4j.Logger</span></span><br><span class="line"><span class="comment"><span class="doctag">@Slf</span>4j org.slf4j.Logger</span></span><br><span class="line"><span class="comment"><span class="doctag">@XSlf</span>4j org.slf4j.ext.XLogger</span></span><br><span class="line"><span class="comment"><span class="doctag">@CommonsLog</span> org.apache.commons.logging.Log</span></span><br><span class="line"><span class="comment"><span class="doctag">@JBossLog</span> org.jboss.logging.Logger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User7</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用睡觉方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pics2.baidu.com/feed/5366d0160924ab18ef97d5add23f99cb79890bf6.jpeg@f_auto?token=1f9b2ee1213b8abfb99a885446a1216c" alt="img"></p><p><img src="https://pics7.baidu.com/feed/37d12f2eb9389b5034ec70f660f09adbe6116e4b.jpeg@f_auto?token=7fd9b3921ad5dc7d7bc50a23fad7cb8d" alt="img"></p><ul><li>Cleanup</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//主要用来修饰 IO 流相关类, 会在 finally 代码块中对该资源进行 close();</span><br></pre></td></tr></table></figure><ul><li>SneakyThrows</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对方法中的异常进行捕捉并抛出</span></span><br><span class="line"><span class="comment">//放在类的前面</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Synchronized</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//给方法加上同步锁</span><br></pre></td></tr></table></figure><p><img src="https://pics4.baidu.com/feed/0eb30f2442a7d933133c78114b8eae1572f0010c.jpeg@f_auto?token=0371b9b4feb62cd3feba433632a275df" alt="img"></p><ul><li>Getter(lazy &#x3D; true)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//标注字段为懒加载字段，懒加载字段在创建对象时不会进行初始化，而是在第一次访问的时候才会初始化，后面再次访问也不会重复初始化</span><br></pre></td></tr></table></figure><p><img src="https://pics4.baidu.com/feed/d788d43f8794a4c24530e483ea3164d3ac6e3956.jpeg@f_auto?token=b2db4d9c4d7c8c662545f51bd77e0842" alt="img"></p><p><img src="https://pics4.baidu.com/feed/0823dd54564e9258d61884897b47ae5ecdbf4ef0.jpeg@f_auto?token=587397983ea73ded2df0097e04e7a528" alt="img"></p><p><img src="https://pics7.baidu.com/feed/11385343fbf2b211965d4b0b2f451a3e0dd78e54.jpeg@f_auto?token=ab2e106855d46319bb62daa7e98b1534" alt="img"></p><ul><li>Wither</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给final字段赋值的一种方法</span><br></pre></td></tr></table></figure><p><img src="https://pics0.baidu.com/feed/b999a9014c086e0619f1bd67e7cd04f20bd1cb89.jpeg@f_auto?token=c3a49ba1719cf67a82349b4cad969d3d" alt="img"></p><ul><li>Delegate</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为List类型的字段生成一大堆常用的方法，其实这些方法都是List中的方法</span><br><span class="line"></span><br><span class="line">注意：一个类中只能使用一个@Delegate注解，因为使用多个会生成多个size()方法，从而会编译报错。</span><br></pre></td></tr></table></figure><p><img src="https://pics1.baidu.com/feed/c2fdfc039245d6881f191a6c43070218d31b242f.jpeg@f_auto?token=57c884687756351f591b8bde75252bf4" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful</title>
      <link href="/2024/06/27/restful/"/>
      <url>/2024/06/27/restful/</url>
      
        <content type="html"><![CDATA[<h1 id="restful"><a href="#restful" class="headerlink" title="restful"></a>restful</h1><blockquote><p><a href="https://blog.csdn.net/qq_50313418/article/details/123803914">https://blog.csdn.net/qq_50313418/article/details/123803914</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/hsh881025/article/details/106629941/">https://blog.csdn.net/hsh881025/article/details/106629941/</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/qq_21484461/article/details/138232146">https://blog.csdn.net/qq_21484461/article/details/138232146</a></p></blockquote><h2 id="restful简介和使用"><a href="#restful简介和使用" class="headerlink" title="restful简介和使用"></a>restful简介和使用</h2><h3 id="1-restful简介"><a href="#1-restful简介" class="headerlink" title="1. restful简介"></a>1. restful简介</h3><ol><li>Restful</li></ol><p>一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><ol start="2"><li>URL定义</li></ol><p>资源：互联网所有的事物都可以被抽象为资源<br>一首歌 一张图片 数据库一条记录<br>资源操作：使用POST(添加)、DELETE(删除)、PUT(修改)、GET(查询)，使用不同请求方法对资源进行操作。</p><ul><li>删除 delete</li><li>查询 get</li><li>添加 post</li><li>修改 put (修改全部字段)| patch(更新部分字段)</li></ul><h3 id="2-传统方式与restful操作资源对比"><a href="#2-传统方式与restful操作资源对比" class="headerlink" title="2.传统方式与restful操作资源对比"></a>2.传统方式与restful操作资源对比</h3><ul><li>传统方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/item/queryUser.action?id=1 查询,GET</span><br><span class="line">http://127.0.0.1/item/saveUser.action 新增,POST</span><br><span class="line">http://127.0.0.1/item/updateUser.action 更新,PUT</span><br><span class="line">http://127.0.0.1/item/deleteUser.action?id=1 删除,DELETE</span><br></pre></td></tr></table></figure><p>传统方式每次请求的接口上都在描述功能，但是没有必要，因为不同的请求就代表了不同的意图，不需要描述。例如：get请求就是查询，post请求就是添加，put请求就是修改全部，patch请求就是更新部分字段，delete请求就是删除。</p><ul><li>restful操作资源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【GET】 /users # 查询用户信息列表</span><br><span class="line">【GET】 /users/1001 # 查看某个用户信息</span><br><span class="line">【POST】 /users # 新建用户信息</span><br><span class="line">【PUT】 /users/1001 # 更新用户信息(全部字段)</span><br><span class="line">【PATCH】 /users/1001 # 更新用户信息(部分字段)</span><br><span class="line">【DELETE】 /users/1001 # 删除用户信息</span><br></pre></td></tr></table></figure><p>使用restful操作资源只需要进行请求就行，不需要对请求进行描述。</p><ul><li>rest API设计原则</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">1.使用名词，不使用动词</span><br><span class="line">/getAllUsers    =&gt;get   /users  </span><br><span class="line">=&gt;get /users/002</span><br><span class="line">2.get只用于查询，不涉及修改</span><br><span class="line">3.使用复数名词</span><br><span class="line">/car     =&gt; /cars</span><br><span class="line">4.使用子资源表达关系</span><br><span class="line">GET /cars/711/drivers/4 返回 car 711的4号司机</span><br><span class="line">5.使用http头声明序列化格式</span><br><span class="line">- 在客户端和服务端，双方都要知道通讯的格式，格式在HTTP-Header中指定</span><br><span class="line">对于controller：</span><br><span class="line">Accept 定义接受的类型</span><br><span class="line">Content-Type 定义响应类型</span><br><span class="line">6.为集合提供过滤 排序 选择和分页等功能</span><br><span class="line">- Filtering过滤:使用唯一的查询参数进行</span><br><span class="line">GET /cars?color=red 返回红色的cars</span><br><span class="line">GET /cars?seats&lt;=2 返回小于两座位的cars集合</span><br><span class="line"></span><br><span class="line">- Sorting排序:允许针对多个字段排序</span><br><span class="line">GET /cars?sort=-manufactorer,+model</span><br><span class="line">这是返回根据生产者降序和模型升序排列的car集合</span><br><span class="line"></span><br><span class="line">- Field selection</span><br><span class="line">移动端能够显示其中一些字段，它们其实不需要一个资源的所有字段，给API消费者一个选择字段的能力，这会降低网络流量，提高API可用性。</span><br><span class="line">GET /cars?fields=manufacturer,model,id,color</span><br><span class="line"></span><br><span class="line">- Paging分页</span><br><span class="line">使用 limit 和offset.实现分页，缺省limit=20 和offset=0；</span><br><span class="line">GET /cars?offset=10&amp;limit=5</span><br><span class="line">为了将总数发给客户端，使用订制的HTTP头： X-Total-Count.</span><br><span class="line">链接到下一页或上一页可以在HTTP头的link规定，遵循Link规定:</span><br><span class="line">Link: &lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=15&amp;limit=5&gt;; rel=&quot;next&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=50&amp;limit=3&gt;; rel=&quot;last&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=0&amp;limit=5&gt;; rel=&quot;first&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=5&amp;limit=5&gt;; rel=&quot;prev&quot;,</span><br><span class="line">7.版本化API 支付宝v1 v2 v3</span><br><span class="line">- 使得API版本变得强制性，不要发布无版本的API，使用简单数字，避免小数点如2.5.</span><br><span class="line">一般在Url后面使用?v</span><br><span class="line">/blog/api/v1</span><br><span class="line">8.使用http状态码处理错误</span><br><span class="line">- 如果你的API没有错误处理是很难的，只是返回500和出错堆栈不一定有用</span><br><span class="line">- Http状态码提供70个出错，我们只要使用10个左右：</span><br><span class="line">  `200 – OK – 一切正常</span><br><span class="line">  `201 – OK – 新的资源已经成功创建</span><br><span class="line">  `204 – OK – 资源已经成功删除</span><br><span class="line">  `304 – Not Modified – 客户端使用缓存数据</span><br><span class="line">  `400 – Bad Request – 请求无效，需要附加细节解释如 &quot;JSON无效&quot;</span><br><span class="line">  `401 – Unauthorized – 请求需要用户验证</span><br><span class="line">  `403 – Forbidden – 服务器已经理解了请求，但是拒绝服务或这种请求的访问是不允许的。</span><br><span class="line">  `404 – Not found – 没有发现该资源</span><br><span class="line">  `422 – Unprocessable Entity – 只有服务器不能处理实体时使用，比如图像不能被格式化，或者重要字段丢失。</span><br><span class="line">  `500 – Internal Server Error – API开发者应该避免这种错误。</span><br><span class="line">使用详细的错误包装错误：  状态码  错误信息      正确：状态码  +  数据  复杂的话还有header头信息</span><br><span class="line">&#123;</span><br><span class="line">  &quot;errors&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;userMessage&quot;: &quot;Sorry, the requested resource does not exist&quot;,// 错误信息</span><br><span class="line">    &quot;internalMessage&quot;: &quot;No car found in the database&quot;,</span><br><span class="line">    &quot;code&quot;: 34,// 状态码</span><br><span class="line">    &quot;more info&quot;: &quot;http://dev.mwaysolutions.com/blog/api/v1/errors/12345&quot;// 错误链接</span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统方式操作资源会在控制器方法上使用@RequestMapping注解来接收添加、删除、更新、查询的请求</p><p>restful方式操作资源会在方法上使用@PostMapping注解专门来接收添加请求</p><p> 使用@DeleteMapping注解专门来接收删除请求</p><p> 使用@PutMapping注解专门来接收更新请求(全部字段)|@PatchMapping(部分字段)</p><p> 使用@GetMapping注解专门来接收查询请求</p><p>这样的化对于每一种方法都有唯一类型的请求，而不是使用@RequestMapping注解接受所有类型的请求。</p><h3 id="使用restful方式开发controller"><a href="#使用restful方式开发controller" class="headerlink" title="使用restful方式开发controller"></a>使用restful方式开发controller</h3><p><img src="/restful.assets/image-20240613134311127.png" alt="image-20240613134311127"></p><p><strong>用到的资源类</strong></p><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 构造方法、get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法、get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController  // @RestController: 专用于restful风格的注解 = @Controller (控制器) + @ResponseBody (方法返回值为json)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/v1/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ResponseEntity:springmvc封装的专用于restful的响应类 这个类在响应时可以提供响应的状态码,同时还可以自定义响应头信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// HttpStatus:  springmvc封装的一个枚举类  这个类中都是网络中状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个用户详细</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>   <span class="comment">// 也可以写成@RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="comment">// @GetMapping是@RequestMapping的子类注解,使用@GetMapping代表只能使用GET方式访问到当前请求</span></span><br><span class="line">    <span class="comment">// @GetMapping的参数这里不能写死，日后需要传一个参数，所以写一个占位id</span></span><br><span class="line">    <span class="comment">// @PathVariable注解:代表在路径中获取请求参数  (不获取form表单了也不获取问号后面的了)</span></span><br><span class="line">    <span class="comment">// @PathVariable注解的value属性写获取路径中的哪个参数，获取上面@GetMapping(&quot;/&#123;id&#125;&quot;)中的id</span></span><br><span class="line">    <span class="comment">// Integer id  接收路径中的参数</span></span><br><span class="line">    <span class="comment">//@ResponseBody   // 将控制器方法返回值转为json</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">user</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>  Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;本次id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;小陈&quot;</span>, <span class="number">2300.23</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(user, HttpStatus.OK);</span><br><span class="line">        <span class="comment">// 第一个参数是body是什么</span></span><br><span class="line">        <span class="comment">// 第二个参数是状态码是什么  HttpStatus.OK ：代表返回成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">users</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">21</span>, <span class="string">&quot;小王&quot;</span>, <span class="number">2300.23</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">24</span>, <span class="string">&quot;小金豆&quot;</span>, <span class="number">3400.23</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="comment">// @ResponseBody 将方法返回值转为json格式数据 并响应请求</span></span><br><span class="line">    <span class="comment">// @RequestBody: 接收请求的json格式数据 将json格式数据转化为对象</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;   <span class="comment">// 只接受json</span></span><br><span class="line">        log.info(<span class="string">&quot;name:&#123;&#125;, salary:&#123;&#125;, bir:&#123;&#125;&quot;</span>, user.getName(), user.getSalary(), user.getBir());</span><br><span class="line">        <span class="comment">// 调用业务方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">        <span class="comment">// 查询成功返回状态码为 HttpStatus.NO_CONTENT : 没有内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>         <span class="comment">// 全字段更新</span></span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="comment">// @PathVariable 从路径中获取</span></span><br><span class="line">    <span class="comment">// @RequestBody 从响应体获取</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        log.info(<span class="string">&quot;name:&#123;&#125;, salary:&#123;&#125;, bir:&#123;&#125;&quot;</span>, user.getName(), user.getSalary(), user.getBir());</span><br><span class="line">        <span class="comment">// 调用业务方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">        <span class="comment">// 更新成功返回状态码为 HttpStatus.NO_CONTENT : 没有内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;本次id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">        <span class="comment">// 更新成功返回状态码为 HttpStatus.NO_CONTENT : 没有内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取这个人的所有宠物</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;/pets&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Pet&gt;&gt; <span class="title function_">pets</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询哪个人id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        List&lt;Pet&gt; pets = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="number">21</span>, <span class="string">&quot;小红帽&quot;</span>, <span class="number">23</span>), <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="number">22</span>, <span class="string">&quot;小猪&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(pets, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取这个人的某个宠物</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;/pets/&#123;pid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Pet&gt; <span class="title function_">pet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@PathVariable(&quot;pid&quot;)</span> Integer petId)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询哪个人id: &#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="number">21</span>, <span class="string">&quot;小红帽&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(pet, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2024/06/27/springboot/"/>
      <url>/2024/06/27/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><blockquote><p><a href="https://blog.csdn.net/qq_45832461/article/details/140019153">https://blog.csdn.net/qq_45832461/article/details/140019153</a></p></blockquote><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><h3 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h3><p><strong>开闭原则</strong><code>OCP</code>：<strong>在软件开发过程中应当对扩展开放，对修改关闭</strong>。</p><p>依赖倒置原则(<code>Dependence Inversion Principle</code>)，简称<code>DIP</code>，主要倡导面向抽象编程，面向接口编程，不要面向具体编程，让<strong>上层</strong>不再依赖<strong>下层</strong>，下面改动了，上面的代码不会受到牵连</p><p><strong>Spring框架可以做到</strong>:在Spring框架中，它可以帮助程序员<code>new</code>对象，并且它还可以将<code>new</code>出来的对象赋到属性上。</p><hr><p>控制反转（<code>Inversion of Control</code>，缩写为<code>IoC</code>），是面向对象编程中的一种设计思想，可以用来降低代码之间的耦合度，符合依赖倒置原则。</p><p>控制反转的核心是：<strong>将对象的创建权交出去，将对象和对象之间关系的管理权交出去，由第三方容器来负责创建与维护</strong>。</p><p>控制反转常见的实现方式：依赖注入（<code>Dependency Injection</code>，简称<code>DI</code>）</p><p>通常，依赖注入的实现由包括两种方式：</p><ul><li><p>set方法注入</p></li><li><p>构造方法注入</p></li></ul><h3 id="spring注解"><a href="#spring注解" class="headerlink" title="spring注解"></a>spring注解</h3><ul><li><p>@Value</p></li><li><p>@Autowired</p></li><li><p>@Component</p></li><li><p>@ConfigurationProperties</p></li></ul><h3 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h3><h2 id="springboot框架结构"><a href="#springboot框架结构" class="headerlink" title="springboot框架结构"></a>springboot框架结构</h2><blockquote><p><a href="https://blog.csdn.net/weixin_46356448/article/details/136992276">https://blog.csdn.net/weixin_46356448/article/details/136992276</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/115403195">https://zhuanlan.zhihu.com/p/115403195</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/qq_66498950/article/details/132533711">https://blog.csdn.net/qq_66498950/article/details/132533711</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/ZHI_YUE/article/details/132048647">https://blog.csdn.net/ZHI_YUE/article/details/132048647</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/362984115?utm_id=0&wd=&eqid=f5a4e51e000b7ad0000000026576ddd1">https://zhuanlan.zhihu.com/p/362984115?utm_id=0&amp;wd=&amp;eqid=f5a4e51e000b7ad0000000026576ddd1</a></p></blockquote><blockquote><ul><li><code>项目根目录/src/main/java</code>：放置项目Java源代码</li><li><code>项目根目录/src/main/resources</code>：放置项目静态资源和配置文件</li><li><code>项目根目录/src/test/java</code>：放置项目测试用例代码</li></ul></blockquote><ul><li>&#x2F;src&#x2F;main&#x2F;java 目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|_annotation：放置项目自定义注解</span><br><span class="line">|_aspect：放置切面代码</span><br><span class="line">|_config：放置配置类</span><br><span class="line">|_constant：放置常量、枚举等定义</span><br><span class="line">   |__consist：存放常量定义</span><br><span class="line">   |__enums：存放枚举定义</span><br><span class="line">|_controller：放置控制器代码</span><br><span class="line">|_filter：放置一些过滤、拦截相关的代码</span><br><span class="line">|_mapper：放置数据访问层代码接口</span><br><span class="line">|_model：放置数据模型代码</span><br><span class="line">   |__entity：放置数据库实体对象定义</span><br><span class="line">   |__dto：存放数据传输对象定义</span><br><span class="line">   |__vo：存放显示层对象定义</span><br><span class="line">|_service：放置具体的业务逻辑代码（接口和实现分离）</span><br><span class="line">   |__intf：存放业务逻辑接口定义</span><br><span class="line">   |__impl：存放业务逻辑实际实现</span><br><span class="line">|_utils：放置工具类和辅助代码</span><br></pre></td></tr></table></figure><ul><li><code>/src/main/resources</code>目录：静态配置文件和页面静态资源等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|_mapper：存放mybatis的XML映射文件（如果是mybatis项目）</span><br><span class="line">|_static：存放网页静态资源，比如下面的js/css/img</span><br><span class="line">   |__js：</span><br><span class="line">   |__css：</span><br><span class="line">   |__img：</span><br><span class="line">   |__font：</span><br><span class="line">   |__等等</span><br><span class="line">|_template：存放网页模板，比如thymeleaf/freemarker模板等</span><br><span class="line">   |__header</span><br><span class="line">   |__sidebar</span><br><span class="line">   |__bottom</span><br><span class="line">   |__XXX.html等等</span><br><span class="line">|_application.yml       基本配置文件</span><br><span class="line">|_application-dev.yml   开发环境配置文件</span><br><span class="line">|_application-test.yml  测试环境配置文件</span><br><span class="line">|_application-prod.yml  生产环境配置文件</span><br></pre></td></tr></table></figure><ul><li>数据模型定义区分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</span><br><span class="line"></span><br><span class="line">DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</span><br><span class="line"></span><br><span class="line">BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。</span><br><span class="line"></span><br><span class="line">AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</span><br><span class="line"></span><br><span class="line">VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</span><br><span class="line"></span><br><span class="line">Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。</span><br></pre></td></tr></table></figure><ul><li>项目结构划分总结</li></ul><p><img src="https://img-blog.csdnimg.cn/direct/31d3d2a88f0f493ca80f9f96958ee802.png" alt="img"></p><p> 对应代码目录的流转逻辑就是：</p><p><img src="https://img-blog.csdnimg.cn/direct/db2b348ec5da4eb0a4698a378dfeb1cf.png" alt="img"></p><ul><li>注意事项</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Contorller层参数传递建议不要使用HashMap，建议使用数据模型定义</span><br><span class="line"></span><br><span class="line">Controller层里可以做参数校验、异常抛出等操作，但建议不要放太多业务逻辑，业务逻辑尽量放到Service层代码中去做</span><br><span class="line"></span><br><span class="line">Service层做实际业务逻辑，可以按照功能模块做好定义和区分，相互可以调用</span><br><span class="line"></span><br><span class="line">功能模块Service之间引用时，建议不要渗透到DAO层（或者mapper层），基于Service层进行调用和复用比较合理</span><br><span class="line"></span><br><span class="line">业务逻辑层Service和数据库DAO层的操作对象不要混用。Controller层的数据对象不要直接渗透到DAO层（或者mapper层）；同理数据表实体对象Entity也不要直接传到Controller层进行输出或展示。</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_27480007/article/details/130384379">https://blog.csdn.net/qq_27480007/article/details/130384379</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2024/06/27/sql/"/>
      <url>/2024/06/27/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT - 从数据库中提取数据</span><br><span class="line">UPDATE - 更新数据库中的数据</span><br><span class="line">DELETE - 从数据库中删除数据</span><br><span class="line">INSERT INTO - 向数据库中插入新数据</span><br><span class="line">CREATE DATABASE - 创建新数据库</span><br><span class="line">ALTER DATABASE - 修改数据库</span><br><span class="line">CREATE TABLE - 创建新表</span><br><span class="line">ALTER TABLE - 变更（改变）数据库表</span><br><span class="line">DROP TABLE - 删除表</span><br><span class="line">CREATE INDEX - 创建索引（搜索键）</span><br><span class="line">DROP INDEX - 删除索引</span><br></pre></td></tr></table></figure><p>sql基本语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- distinct去重</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">column</span> <span class="keyword">from</span> <span class="keyword">table</span>; </span><br><span class="line"><span class="comment">-- where过滤</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">from</span> table_name</span><br><span class="line"><span class="keyword">where</span> codition;</span><br><span class="line"><span class="comment">-- where子句中的运算符 </span></span><br><span class="line"><span class="operator">=</span> 等于</span><br><span class="line"><span class="operator">&lt;&gt;</span> 不等于</span><br><span class="line"><span class="operator">&gt;</span> 大于</span><br><span class="line"><span class="operator">&lt;</span> 小于</span><br><span class="line"><span class="operator">&gt;=</span> 大于等于</span><br><span class="line"><span class="operator">&lt;=</span> 小于等于</span><br><span class="line"><span class="keyword">between</span> 在某个范围之内</span><br><span class="line"><span class="keyword">like</span> 用于模糊查询</span><br><span class="line"><span class="keyword">in</span> 指定针对某个列的多个可能值</span><br><span class="line"><span class="comment">-- and &amp; or 运算符</span></span><br><span class="line"><span class="comment">-- 基于一个以上的条件对记录进行过滤</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> sex <span class="operator">=</span> <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">18</span> <span class="keyword">or</span> sex <span class="operator">=</span> <span class="string">&#x27;woman&#x27;</span>;</span><br><span class="line"><span class="comment">-- order by关键字</span></span><br><span class="line"><span class="comment">-- 对结果集进行排序,asc升序，desc降序</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">column</span> <span class="keyword">asc</span></span><br><span class="line"><span class="comment">-- insert into语句</span></span><br><span class="line"><span class="comment">-- 插入新记录</span></span><br><span class="line"><span class="comment">-- 不指定列名</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">values</span>(values1,values2,...);</span><br><span class="line"><span class="comment">-- 指定列名</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>(column1,column2,...) <span class="keyword">values</span>(values1,values2,...); </span><br><span class="line"><span class="comment">-- update语句</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">column</span> <span class="operator">=</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="comment">-- delete语句  delete删除表数据，drop删除表结构和数据 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE dbname;</span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(size),</span><br><span class="line">column_name2 data_type(size),</span><br><span class="line">column_name3 data_type(size),</span><br><span class="line">....</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">PersonID <span class="type">int</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>select top</li></ul><p>用于返回的记录数目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- mysql</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT number;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM Persons</span><br><span class="line">LIMIT 5;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Oracle</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- sqlserver</span><br><span class="line">SELECT TOP number|percent column_name(s)</span><br><span class="line">FROM table_name;</span><br><span class="line">-- PERCENT百分比</span><br><span class="line">SELECT TOP 50 PERCENT * FROM Websites;</span><br></pre></td></tr></table></figure><ul><li>like</li></ul><p>搜索列中的指定模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%k&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- %通配符 </span></span><br><span class="line"><span class="comment">-- _通配符 只能匹配一个字符</span></span><br><span class="line"><span class="comment">-- []通配符</span></span><br><span class="line"><span class="comment">-- ^非</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选取 name 以 &quot;G&quot;、&quot;F&quot; 或 &quot;s&quot; 开始的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[GFs]&#x27;</span>;</span><br><span class="line"><span class="comment">-- 选取 name 不以 A 到 H 字母开头的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[^A-H]&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>in</li></ul><p>在 WHERE 子句中规定多个值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IN</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 选择name 为 &quot;Google&quot; 或 &quot;baidu&quot; 的所有网站</span><br><span class="line">SELECT * </span><br><span class="line">FROM Websites</span><br><span class="line">WHERE name IN (&#x27;Google&#x27;,&#x27;baidu&#x27;);</span><br></pre></td></tr></table></figure><ul><li>between</li></ul><p>选取介于两个值之间的数据范围内的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 于 1 和 20 之间的所有网站</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WebsitesWHERE alexa <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT BETWEEN：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WebsitesWHERE alexa <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 介于 1 和 20 之间但 country 不为 USA 和 IND 的所有网站</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WebsitesWHERE (alexa <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>)<span class="keyword">AND</span> country <span class="keyword">NOT</span> </span><br><span class="line"> <span class="keyword">IN</span> (<span class="string">&#x27;USA&#x27;</span>, <span class="string">&#x27;IND&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name 以介于 &#x27;A&#x27; 和 &#x27;H&#x27; 之间字母开始的所有网站</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WebsitesWHERE name <span class="keyword">BETWEEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;H&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>别名as</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT name AS n, country AS c</span><br><span class="line">FROM Websites;</span><br></pre></td></tr></table></figure><ul><li>连接join</li></ul><p><strong>INNER JOIN</strong>：从多个表中返回满足 JOIN 条件的所有行</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_innerjoin.gif" alt="SQL INNER JOIN"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- join 等同 inner join</span><br><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">JOIN table2 ON condition;</span><br><span class="line"></span><br><span class="line">SELECT Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line">FROM Websites</span><br><span class="line">INNER JOIN access_logON Websites.id=access_log.site_id;</span><br></pre></td></tr></table></figure><p><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_leftjoin.gif" alt="SQL LEFT JOIN"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- left join等同left outer join</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">LEFT JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 实例</span><br><span class="line">SELECT Websites.name, access_log.count, access_log.date</span><br><span class="line">FROM Websites</span><br><span class="line">LEFT JOIN access_log</span><br><span class="line">ON Websites.id=access_log.site_id</span><br><span class="line">ORDER BY access_log.count DESC;</span><br></pre></td></tr></table></figure><p><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_rightjoin.gif" alt="SQL RIGHT JOIN"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- RIGHT JOIN 称为 RIGHT OUTER JOIN。</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">RIGHT JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br><span class="line"></span><br><span class="line">-- 实例</span><br><span class="line">SELECT websites.name, access_log.count, access_log.date</span><br><span class="line">FROM websites</span><br><span class="line">RIGHT JOIN access_log</span><br><span class="line">ON access_log.site_id=websites.id</span><br><span class="line">ORDER BY access_log.count DESC;</span><br></pre></td></tr></table></figure><p><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_fulljoin.gif" alt="SQL FULL OUTER JOIN"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">FULL OUTER JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br><span class="line"></span><br><span class="line">-- 实例</span><br><span class="line">SELECT Websites.name, access_log.count, access_log.date</span><br><span class="line">FROM Websites</span><br><span class="line">FULL OUTER JOIN access_log</span><br><span class="line">ON Websites.id=access_log.site_id</span><br><span class="line">ORDER BY access_log.count DESC;</span><br></pre></td></tr></table></figure><ul><li>union</li></ul><p>合并两个或多个 SELECT 语句的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- UNION不允许重复值</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UNION ALL允许重复值</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带where子句</span></span><br><span class="line"><span class="keyword">SELECT</span> country, name <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure><ul><li>select into</li></ul><p>从一个表复制数据，然后把数据插入到另一个新表中。</p><blockquote><p><strong>注意：</strong></p><p>MySQL 数据库不支持 SELECT … INTO 语句，但支持 <a href="https://www.runoob.com/sql/sql-insert-into-select.html">INSERT INTO … SELECT</a> 。</p><p>当然你可以使用以下语句来拷贝表结构及数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 新表</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM 旧表 </span><br></pre></td></tr></table></figure></blockquote><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 复制所有列插入新表</span><br><span class="line">SELECT *</span><br><span class="line">INTO newtable [IN externaldb]</span><br><span class="line">FROM table1;</span><br><span class="line"></span><br><span class="line">-- 复制指定列插入新表</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">INTO newtable [IN externaldb]</span><br><span class="line">FROM table1;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>SELECT INTO 语句可用于通过另一种模式创建一个新的空表。只需要添加促使查询没有数据返回的 WHERE 子句即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">INTO *newtable*</span><br><span class="line">FROM *table1*</span><br><span class="line">WHERE 1=0;</span><br></pre></td></tr></table></figure></blockquote><ul><li>insert into select</li></ul><p>从一个表复制数据，然后把数据插入到一个已存在的表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 从一个表中复制所有的列插入到另一个已存在的表中</span><br><span class="line">INSERT INTO table2</span><br><span class="line">SELECT * FROM table1;</span><br><span class="line"></span><br><span class="line">-- 只复制指定的列插入到另一个已存在的表中</span><br><span class="line">INSERT INTO table2</span><br><span class="line">(column_name(s))</span><br><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1;</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ol><li><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255) NOT NULL,</span><br><span class="line">    Age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加NOT NULL 约束</span><br><span class="line">ALTER TABLE Persons</span><br><span class="line">MODIFY Age int NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 删除 NOT NULL 约束</span><br><span class="line">ALTER TABLE Persons</span><br><span class="line">MODIFY Age int NULL;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</li></ol><blockquote><p>UNIQUE 约束唯一标识数据库表中的每条记录。</p><p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p><p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p><p>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p></blockquote><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">UNIQUE (P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL UNIQUE,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当表已被创建时，如需在 “P_Id” 列创建 UNIQUE 约束，请使用下面的 SQL：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD UNIQUE (P_Id)</span><br></pre></td></tr></table></figure><p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)</span><br></pre></td></tr></table></figure><p><strong>撤销 UNIQUE 约束</strong></p><p>如需撤销 UNIQUE 约束，请使用下面的 SQL：</p><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP INDEX uc_PersonID</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT uc_PersonID</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>PRIMARY KEY</strong> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li></ol><blockquote><p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</p><p>主键必须包含唯一的值。</p><p>主键列不能包含 NULL 值。</p><p>每个表都应该有一个主键，并且每个表只能有一个主键。</p></blockquote><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">PRIMARY KEY (P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL PRIMARY KEY,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>注释：</strong>在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（P_Id 和 LastName）组成的。</p><p>当表已被创建时，如需在 “P_Id” 列创建 PRIMARY KEY 约束，请使用下面的 SQL：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD PRIMARY KEY (P_Id)</span><br></pre></td></tr></table></figure><p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)</span><br></pre></td></tr></table></figure><p><strong>注释：</strong>如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p><p><strong>撤销 PRIMARY KEY 约束</strong></p><p>如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：</p><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP PRIMARY KEY</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT pk_PersonID</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li></ol><p>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY(唯一约束的键)。</p><p>让我们通过一个实例来解释外键。请看下面两个表：</p><p>“Persons” 表：</p><table><thead><tr><th align="left">P_Id</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Hansen</td><td align="left">Ola</td><td align="left">Timoteivn 10</td><td align="left">Sandnes</td></tr><tr><td align="left">2</td><td align="left">Svendson</td><td align="left">Tove</td><td align="left">Borgvn 23</td><td align="left">Sandnes</td></tr><tr><td align="left">3</td><td align="left">Pettersen</td><td align="left">Kari</td><td align="left">Storgt 20</td><td align="left">Stavanger</td></tr></tbody></table><p>“Orders” 表：</p><table><thead><tr><th align="left">O_Id</th><th align="left">OrderNo</th><th align="left">P_Id</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">77895</td><td align="left">3</td></tr><tr><td align="left">2</td><td align="left">44678</td><td align="left">3</td></tr><tr><td align="left">3</td><td align="left">22456</td><td align="left">2</td></tr><tr><td align="left">4</td><td align="left">24562</td><td align="left">1</td></tr></tbody></table><p>请注意，”Orders” 表中的 “P_Id” 列指向 “Persons” 表中的 “P_Id” 列。</p><p>“Persons” 表中的 “P_Id” 列是 “Persons” 表中的 PRIMARY KEY。</p><p>“Orders” 表中的 “P_Id” 列是 “Orders” 表中的 FOREIGN KEY。</p><p>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</p><p>FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p><ol start="4"><li><strong>CHECK</strong> - 保证列中的值符合指定的条件。</li></ol><blockquote><p>CHECK 约束用于限制列中的值的范围。</p><p>如果对单个列定义 CHECK 约束，那么该列只允许特定的值。</p><p>如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</p></blockquote><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">CHECK (P_Id&gt;0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL CHECK (P_Id&gt;0),</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>ALTER TABLE 时的 SQL CHECK 约束</strong></p><p>当表已被创建时，如需在 “P_Id” 列创建 CHECK 约束，请使用下面的 SQL：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CHECK (P_Id&gt;0)</span><br></pre></td></tr></table></figure><p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p><p><strong>MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br></pre></td></tr></table></figure><p><strong>撤销 CHECK 约束</strong></p><p>如需撤销 CHECK 约束，请使用下面的 SQL：</p><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT chk_Person</span><br></pre></td></tr></table></figure><p><strong>MySQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CHECK chk_Person</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</li></ol><p>下面的 SQL 在 “Persons” 表创建时在 “City” 列上创建 DEFAULT 约束：</p><p><strong>My SQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">    P_Id int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Address varchar(255),</span><br><span class="line">    City varchar(255) DEFAULT &#x27;Sandnes&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>create index</li></ul><p>索引创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 简单索引。允许使用重复值</span><br><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name (column_name)</span><br><span class="line"></span><br><span class="line">-- 唯一索引。不允许重复值</span><br><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name (column_name)</span><br></pre></td></tr></table></figure><ul><li>drop语句</li></ul><p>1、drop index删除索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 语法格式</span><br><span class="line">DROP INDEX [IF EXISTS] index_name</span><br><span class="line">ON TABLE_NAME;</span><br><span class="line"></span><br><span class="line">DROP INDEX：表示要删除索引的操作。</span><br><span class="line">IF EXISTS：是一个可选的子句，用于检查索引是否存在。如果存在，就执行删除操作；如果不存在，不会报错。</span><br><span class="line">index_name：要删除的索引的名称。</span><br><span class="line">ON table_name：指定包含要删除索引的表的名称。</span><br></pre></td></tr></table></figure><p>2、drop table语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 语法格式</span><br><span class="line">DROP TABLE [IF EXISTS] TABLE_NAME;</span><br><span class="line"></span><br><span class="line">DROP TABLE：表示删除表的操作。</span><br><span class="line">IF EXISTS：是一个可选的子句，用于检查表是否存在。如果存在，执行删除操作；如果不存在，不会报错。</span><br><span class="line">table_name：要删除的表的名称。</span><br></pre></td></tr></table></figure><p>3、drop database语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 语法格式</span><br><span class="line">DROP DATABASE [IF EXISTS] database_name;</span><br><span class="line"></span><br><span class="line">DROP DATABASE：表示删除数据库的操作。</span><br><span class="line">IF EXISTS：是一个可选的子句，用于检查数据库是否存在。如果存在，执行删除操作；如果不存在，不会报错。</span><br><span class="line">database_name：要删除的数据库的名称。</span><br></pre></td></tr></table></figure><p>4、drop table语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 语法格式</span><br><span class="line">TRUNCATE TABLE TABLE_NAME;</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE：表示清空表的操作。</span><br><span class="line">table_name：要清空的表的名称。</span><br></pre></td></tr></table></figure><ul><li>alter语句</li></ul><p>用于表中添加、删除或修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 在表中添加列</span><br><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name datatype</span><br><span class="line"></span><br><span class="line">-- 删除表中的列</span><br><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP COLUMN column_name</span><br></pre></td></tr></table></figure><p>要改变表中列的数据类型，请使用下面的语法：</p><p><strong>SQL Server &#x2F; MS Access：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure><p><strong>My SQL &#x2F; Oracle：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">MODIFY COLUMN column_name datatype</span><br></pre></td></tr></table></figure><p>Oracle 10G 之后版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">MODIFY column_name datatype;</span><br></pre></td></tr></table></figure><ul><li>auto increment</li></ul><p>插入新纪录，自动地创建主键字段的值</p><p><strong>用于 MySQL 的语法</strong></p><p>下面的 SQL 语句把 “Persons” 表中的 “ID” 列定义为 auto-increment 主键字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">ID int NOT NULL AUTO_INCREMENT,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">PRIMARY KEY (ID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>MySQL 使用 AUTO_INCREMENT 关键字来执行 auto-increment 任务。</p><p>默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。</p><p>要让 AUTO_INCREMENT 序列以其他的值起始，请使用下面的 SQL 语法：</p><p>ALTER TABLE Persons AUTO_INCREMENT&#x3D;100</p><p>要在 “Persons” 表中插入新记录，我们不必为 “ID” 列规定值（会自动添加一个唯一的值）：</p><p>INSERT INTO Persons (FirstName,LastName)<br>VALUES (‘Lars’,’Monsen’)</p><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。”ID” 列会被赋予一个唯一的值。”FirstName” 列会被设置为 “Lars”，”LastName” 列会被设置为 “Monsen”。</p><p><strong>用于 SQL Server 的语法</strong></p><p>下面的 SQL 语句把 “Persons” 表中的 “ID” 列定义为 auto-increment 主键字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">ID int IDENTITY(1,1) PRIMARY KEY,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>MS SQL Server 使用 IDENTITY 关键字来执行 auto-increment 任务。</p><p>在上面的实例中，IDENTITY 的开始值是 1，每条新记录递增 1。</p><p><strong>提示：</strong>要规定 “ID” 列以 10 起始且递增 5，请把 identity 改为 IDENTITY(10,5)。</p><p>要在 “Persons” 表中插入新记录，我们不必为 “ID” 列规定值（会自动添加一个唯一的值）：</p><p>INSERT INTO Persons (FirstName,LastName)<br>VALUES (‘Lars’,’Monsen’)</p><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。”ID” 列会被赋予一个唯一的值。”FirstName” 列会被设置为 “Lars”，”LastName” 列会被设置为 “Monsen”。</p><p><strong>用于 Oracle 的语法</strong></p><p>在 Oracle 中，代码稍微复杂一点。</p><p>您必须通过 sequence 对象（该对象生成数字序列）创建 auto-increment 字段。</p><p>请使用下面的 CREATE SEQUENCE 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE seq_person</span><br><span class="line">MINVALUE 1</span><br><span class="line">START WITH 1</span><br><span class="line">INCREMENT BY 1</span><br><span class="line">CACHE 10</span><br></pre></td></tr></table></figure><p>上面的代码创建一个名为 seq_person 的 sequence 对象，它以 1 起始且以 1 递增。该对象缓存 10 个值以提高性能。cache 选项规定了为了提高访问速度要存储多少个序列值。</p><p>要在 “Persons” 表中插入新记录，我们必须使用 nextval 函数（该函数从 seq_person 序列中取回下一个值）：</p><p>INSERT INTO Persons (ID,FirstName,LastName)<br>VALUES (seq_person.nextval,’Lars’,’Monsen’)</p><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。”ID” 列会被赋值为来自 seq_person 序列的下一个数字。”FirstName”列 会被设置为 “Lars”，”LastName” 列会被设置为 “Monsen”。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。</p><p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><p>您可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，也可以呈现数据，就像这些数据来自于某个单一的表一样。</p><ul><li>创建视图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- SQL CREATE VIEW 语法</span><br><span class="line">CREATE VIEW view_name AS</span><br><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br><span class="line"></span><br><span class="line">- CREATE VIEW:声明你要创建一个视图。</span><br><span class="line">- view_name: 指定视图的名称。</span><br><span class="line">- AS: 指定关键字，表示视图的定义开始。</span><br><span class="line">- SELECT column1, column2, ...: 指定视图中包含的列，可以是表中的列或计算列。</span><br><span class="line">- FROM table_name: 指定视图从哪个表中获取数据。</span><br><span class="line">- WHERE condition: 可选部分，用于指定筛选条件，限制视图中的行。</span><br></pre></td></tr></table></figure><p><strong>注释：</strong>视图总是显示最新的数据！每当用户查询视图时，数据库引擎通过使用视图的 SQL 语句重建数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建包含高工资员工信息的视图</span><br><span class="line">CREATE VIEW high_salary_employees AS</span><br><span class="line">SELECT employee_id, first_name, last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; 50000;</span><br><span class="line"></span><br><span class="line">-- 查询高工资员工视图</span><br><span class="line">SELECT *</span><br><span class="line">FROM high_salary_employees;</span><br></pre></td></tr></table></figure><ul><li>更新视图</li></ul><p>在 SQL 中，你不能直接使用 UPDATE 语句来更新视图，因为视图是基于查询结果生成的虚拟表，而不是实际存储数据的表。</p><p>更新视图的实质是通过更新视图所基于的表中的数据，然后视图会反映这些变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 语法</span><br><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition;</span><br><span class="line"></span><br><span class="line">-- 实例</span><br><span class="line">-- 步骤 1: 更新 employees 表中的数据</span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = 60000</span><br><span class="line">WHERE employee_id = 1001;</span><br><span class="line"></span><br><span class="line">-- 步骤 2: 查询更新后的高工资员工视图</span><br><span class="line">SELECT *</span><br><span class="line">FROM high_salary_employees;</span><br></pre></td></tr></table></figure><ul><li>撤销视图</li></ul><p>在 SQL 中，撤销（或删除）视图是通过使用 DROP VIEW 语句来实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW [IF EXISTS] view_name;</span><br><span class="line"></span><br><span class="line">DROP VIEW: 表示你要删除一个视图。</span><br><span class="line">IF EXISTS: 可选部分，用于检查视图是否存在。如果存在，则执行删除操作；如果不存在，不会发生错误。在某些数据库系统中，这是可选的。</span><br><span class="line">view_name: 指定要删除的视图的名称。</span><br><span class="line"></span><br><span class="line">-- 删除名为 high_salary_employees 的视图</span><br><span class="line">DROP VIEW IF EXISTS high_salary_employees;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">数据类型</th><th align="left">MySQL</th><th align="left">SQLServer</th><th align="left">Oracle</th></tr></thead><tbody><tr><td align="left"><em>boolean</em></td><td align="left">N&#x2F;A</td><td align="left">Bit</td><td align="left">Byte</td></tr><tr><td align="left"><em>integer</em></td><td align="left">Int Integer</td><td align="left">Int</td><td align="left">Number</td></tr><tr><td align="left"><em>float</em></td><td align="left">Float</td><td align="left">Float Real</td><td align="left">Number</td></tr><tr><td align="left"><em>currency</em></td><td align="left">N&#x2F;A</td><td align="left">Money</td><td align="left">N&#x2F;A</td></tr><tr><td align="left"><em>string (fixed)</em></td><td align="left">Char</td><td align="left">Char</td><td align="left">Char</td></tr><tr><td align="left"><em>string (variable)</em></td><td align="left">Varchar</td><td align="left">Varchar</td><td align="left">Varchar Varchar2</td></tr><tr><td align="left"><em>binary object</em></td><td align="left">Blob Text</td><td align="left">Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td><td align="left">Long Raw</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>常用函数有：</p><p>AVG() - 返回平均值<br>COUNT() - 返回行数<br>FIRST() - 返回第一个记录的值<br>LAST() - 返回最后一个记录的值<br>MAX() - 返回最大值<br>MIN() - 返回最小值<br>SUM() - 返回总和</p><ol><li>GROUP BY 语句</li></ol><p>GROUP BY 语句可结合一些聚合函数来使用</p><p>SQL GROUP BY 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, aggregate_function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure><p>多表连接示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name,<span class="built_in">COUNT</span>(access_log.aid) <span class="keyword">AS</span> nums </span><br><span class="line"><span class="keyword">FROM</span> access_logLEFT <span class="keyword">JOIN</span> Websites <span class="keyword">ON</span> access_log.site_id <span class="operator">=</span> Websites.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name;</span><br></pre></td></tr></table></figure><ol start="2"><li>HAVING 子句</li></ol><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。</p><p>HAVING 子句可以让我们筛选分组后的各组数据。</p><p>SQL HAVING 语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, aggregate_function(column2)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>：要检索的列。</li><li><code>aggregate_function(column2)</code>：一个聚合函数，例如SUM、COUNT、AVG等，应用于<code>column2</code>的值。</li><li><code>table_name</code>：要从中检索数据的表。</li><li><code>GROUP BY column1</code>：根据<code>column1</code>列的值对数据进行分组。</li><li><code>HAVING condition</code>：一个条件，用于筛选分组的结果。只有满足条件的分组会包含在结果集中。</li></ul><p>示例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url, <span class="built_in">SUM</span>(access_log.count) <span class="keyword">AS</span> nums </span><br><span class="line"><span class="keyword">FROM</span> (access_log <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Websites <span class="keyword">ON</span> access_log.site_id<span class="operator">=</span>Websites.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(access_log.count) <span class="operator">&gt;</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, <span class="built_in">SUM</span>(access_log.count) <span class="keyword">AS</span> nums <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id</span><br><span class="line"><span class="keyword">WHERE</span> Websites.alexa <span class="operator">&lt;</span> <span class="number">200</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(access_log.count) <span class="operator">&gt;</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>EXISTS 运算符</li></ol><p>SQL EXISTS 语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><p>示例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url </span><br><span class="line"><span class="keyword">FROM</span> Websites </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> count <span class="keyword">FROM</span> access_log <span class="keyword">WHERE</span> Websites.id <span class="operator">=</span> access_log.site_id <span class="keyword">AND</span> count <span class="operator">&gt;</span> <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url </span><br><span class="line"><span class="keyword">FROM</span> Websites </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> count <span class="keyword">FROM</span> access_log <span class="keyword">WHERE</span> Websites.id <span class="operator">=</span> access_log.site_id <span class="keyword">AND</span> count <span class="operator">&gt;</span> <span class="number">200</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>UCASE() 函数与LCASE() 函数</li></ol><ul><li>UCASE() 函数</li></ul><p>CASE() 函数把字段的值转换为大写。</p><p>SQL UCASE() 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UCASE(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>用于 SQL Server 的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UCASE(name) <span class="keyword">AS</span> site_title, urlFROM Websites;</span><br></pre></td></tr></table></figure><ul><li>LCASE() 函数</li></ul><p>LCASE() 函数把字段的值转换为小写。</p><p>SQL LCASE() 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LCASE(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>用于 SQL Server 的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LCASE(name) <span class="keyword">AS</span> site_title, urlFROM Websites;</span><br></pre></td></tr></table></figure><ol start="5"><li>MID() 函数</li></ol><p>MID() 函数用于从文本字段中提取字符。</p><p>SQL MID() 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MID(column_name[,<span class="keyword">start</span>,length]) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">column_name</td><td align="left">必需。要提取字符的字段。</td></tr><tr><td align="left">start</td><td align="left">必需。规定开始位置（起始值是 1）。</td></tr><tr><td align="left">length</td><td align="left">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td></tr></tbody></table><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示库</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>  <span class="operator">|</span> stackoverflow <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>stackoverflow.com<span class="operator">/</span> <span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> IND     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+---------------------------+-------+---------+</span></span><br></pre></td></tr></table></figure><p>下面的 SQL 语句从 “Websites” 表的 “name” 列中提取前 4 个字符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MID(name,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">AS</span> ShortTitleFROM Websites;</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/mid1.jpg" alt="img"></p><ol start="6"><li>LEN() 函数</li></ol><p>LEN() 函数返回文本字段中值的长度。</p><p>SQL LEN() 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LEN(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>MySQL 中函数为 LENGTH():</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(column_name) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, LENGTH(url) <span class="keyword">as</span> LengthOfURLFROM Websites;</span><br></pre></td></tr></table></figure><ol start="7"><li>ROUND() 函数</li></ol><p>ROUND() 函数用于把数值字段舍入为指定的小数位数。</p><p>SQL ROUND() 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(column_name,decimals) <span class="keyword">FROM</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">column_name</td><td align="left">必需。要舍入的字段。</td></tr><tr><td align="left">decimals</td><td align="left">可选。规定要返回的小数位数。</td></tr></tbody></table><p>示例1：</p><p>ROUND(X)： 返回参数X的四舍五入的一个整数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT ROUND(-1.23);</span><br><span class="line">        -&gt; -1</span><br><span class="line">mysql&gt; SELECT ROUND(-1.58);</span><br><span class="line">        -&gt; -2</span><br><span class="line">mysql&gt; SELECT ROUND(1.58);</span><br><span class="line">        -&gt; 2</span><br></pre></td></tr></table></figure><p>示例2：</p><p>ROUND(X,D)： 返回参数X的四舍五入的有 D 位小数的一个数字。如果D为0，结果将没有小数点或小数部分。</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT ROUND(1.298, 1);</span><br><span class="line">        -&gt; 1.3</span><br><span class="line">mysql&gt; SELECT ROUND(1.298, 0);</span><br><span class="line">        -&gt; 1</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h3><p>在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date&#x2F;Time（日期&#x2F;时间）类型。</p><p><strong>Text 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CHAR(size)</td><td align="left">保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td></tr><tr><td align="left">VARCHAR(size)</td><td align="left">保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。<strong>注释：</strong>如果值的长度大于 255，则被转换为 TEXT 类型。</td></tr><tr><td align="left">TINYTEXT</td><td align="left">存放最大长度为 255 个字符的字符串。</td></tr><tr><td align="left">TEXT</td><td align="left">存放最大长度为 65,535 个字符的字符串。</td></tr><tr><td align="left">BLOB</td><td align="left">用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">存放最大长度为 16,777,215 个字符的字符串。</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。</td></tr><tr><td align="left">LONGTEXT</td><td align="left">存放最大长度为 4,294,967,295 个字符的字符串。</td></tr><tr><td align="left">LONGBLOB</td><td align="left">用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td></tr><tr><td align="left">ENUM(x,y,z,etc.)</td><td align="left">允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。<strong>注释：</strong>这些值是按照您输入的顺序排序的。可以按照此格式输入可能的值： ENUM(‘X’,’Y’,’Z’)</td></tr><tr><td align="left">SET</td><td align="left">与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。</td></tr></tbody></table><p><strong>Number 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">TINYINT(size)</td><td align="left">带符号-128到127 ，无符号0到255。</td></tr><tr><td align="left">SMALLINT(size)</td><td align="left">带符号范围-32768到32767，无符号0到65535, size 默认为 6。</td></tr><tr><td align="left">MEDIUMINT(size)</td><td align="left">带符号范围-8388608到8388607，无符号的范围是0到16777215。 size 默认为9</td></tr><tr><td align="left">INT(size)</td><td align="left">带符号范围-2147483648到2147483647，无符号的范围是0到4294967295。 size 默认为 11</td></tr><tr><td align="left">BIGINT(size)</td><td align="left">带符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。size 默认为 20</td></tr><tr><td align="left">FLOAT(size,d)</td><td align="left">带有浮动小数点的小数字。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。</td></tr><tr><td align="left">DOUBLE(size,d)</td><td align="left">带有浮动小数点的大数字。在 size 参数中规显示定最大位数。在 d 参数中规定小数点右侧的最大位数。</td></tr><tr><td align="left">DECIMAL(size,d)</td><td align="left">作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。</td></tr></tbody></table><blockquote><p><strong>注意：</strong>以上的 size 代表的并不是存储在数据库中的具体的长度，如 int(4) 并不是只能存储4个长度的数字。</p><p>实际上int(size)所占多少存储空间并无任何关系。int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。就是在显示给用户的方式有点不同外，int(M) 跟 int 数据类型是相同的。</p><p>例如：</p><p>1、int的值为10 （指定zerofill）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int（9）显示结果为000000010</span><br><span class="line">int（3）显示结果为010</span><br></pre></td></tr></table></figure><p>就是显示的长度不一样而已 都是占用四个字节的空间</p></blockquote><p><strong>Date 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">DATE()</td><td align="left">日期。格式：YYYY-MM-DD<strong>注释：</strong>支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’</td></tr><tr><td align="left">DATETIME()</td><td align="left">*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS<strong>注释：</strong>支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td></tr><tr><td align="left">TIMESTAMP()</td><td align="left">*时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS<strong>注释：</strong>支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC</td></tr><tr><td align="left">TIME()</td><td align="left">时间。格式：HH:MM:SS<strong>注释：</strong>支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’</td></tr><tr><td align="left">YEAR()</td><td align="left">2 位或 4 位格式的年。<strong>注释：</strong>4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。</td></tr></tbody></table><p>*即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</p><h2 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h2><blockquote><p><a href="https://blog.csdn.net/awd15771131554/article/details/126499897">https://blog.csdn.net/awd15771131554/article/details/126499897</a></p><p><a href="https://blog.csdn.net/weixin_63021300/article/details/132267190">https://blog.csdn.net/weixin_63021300/article/details/132267190</a></p></blockquote><h3 id="PLSQL编程"><a href="#PLSQL编程" class="headerlink" title="PLSQL编程"></a>PLSQL编程</h3><blockquote><p>激活码   </p><p><strong>product code</strong> : ke4tv8t5jtxz493kl8s2nn3t6xgngcmgf3 </p><p><strong>serial Number</strong>: 264452</p><p><strong>password</strong>: xs374ca</p></blockquote><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><h2 id="sqlserver"><a href="#sqlserver" class="headerlink" title="sqlserver"></a>sqlserver</h2><p><strong>String 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th><th align="left">存储</th></tr></thead><tbody><tr><td align="left">char(n)</td><td align="left">固定长度的字符串。最多 8,000 个字符。</td><td align="left">Defined width</td></tr><tr><td align="left">varchar(n)</td><td align="left">可变长度的字符串。最多 8,000 个字符。</td><td align="left">2 bytes + number of chars</td></tr><tr><td align="left">varchar(max)</td><td align="left">可变长度的字符串。最多 1,073,741,824 个字符。</td><td align="left">2 bytes + number of chars</td></tr><tr><td align="left">text</td><td align="left">可变长度的字符串。最多 2GB 文本数据。</td><td align="left">4 bytes + number of chars</td></tr><tr><td align="left">nchar</td><td align="left">固定长度的 Unicode 字符串。最多 4,000 个字符。</td><td align="left">Defined width x 2</td></tr><tr><td align="left">nvarchar</td><td align="left">可变长度的 Unicode 字符串。最多 4,000 个字符。</td><td align="left"></td></tr><tr><td align="left">nvarchar(max)</td><td align="left">可变长度的 Unicode 字符串。最多 536,870,912 个字符。</td><td align="left"></td></tr><tr><td align="left">ntext</td><td align="left">可变长度的 Unicode 字符串。最多 2GB 文本数据。</td><td align="left"></td></tr><tr><td align="left">bit</td><td align="left">允许 0、1 或 NULL</td><td align="left"></td></tr><tr><td align="left">binary(n)</td><td align="left">固定长度的二进制字符串。最多 8,000 字节。</td><td align="left"></td></tr><tr><td align="left">varbinary</td><td align="left">可变长度的二进制字符串。最多 8,000 字节。</td><td align="left"></td></tr><tr><td align="left">varbinary(max)</td><td align="left">可变长度的二进制字符串。最多 2GB。</td><td align="left"></td></tr><tr><td align="left">image</td><td align="left">可变长度的二进制字符串。最多 2GB。</td><td align="left"></td></tr></tbody></table><p><strong>Number 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th><th align="left">存储</th></tr></thead><tbody><tr><td align="left">tinyint</td><td align="left">允许从 0 到 255 的所有数字。</td><td align="left">1 字节</td></tr><tr><td align="left">smallint</td><td align="left">允许介于 -32,768 与 32,767 的所有数字。</td><td align="left">2 字节</td></tr><tr><td align="left">int</td><td align="left">允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。</td><td align="left">4 字节</td></tr><tr><td align="left">bigint</td><td align="left">允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。</td><td align="left">8 字节</td></tr><tr><td align="left">decimal(p,s)</td><td align="left">固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td><td align="left">5-17 字节</td></tr><tr><td align="left">numeric(p,s)</td><td align="left">固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td><td align="left">5-17 字节</td></tr><tr><td align="left">smallmoney</td><td align="left">介于 -214,748.3648 与 214,748.3647 之间的货币数据。</td><td align="left">4 字节</td></tr><tr><td align="left">money</td><td align="left">介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。</td><td align="left">8 字节</td></tr><tr><td align="left">float(n)</td><td align="left">从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。</td><td align="left">4 或 8 字节</td></tr><tr><td align="left">real</td><td align="left">从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。</td><td align="left">4 字节</td></tr></tbody></table><p><strong>Date 类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th><th align="left">存储</th></tr></thead><tbody><tr><td align="left">datetime</td><td align="left">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。</td><td align="left">8 字节</td></tr><tr><td align="left">datetime2</td><td align="left">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。</td><td align="left">6-8 字节</td></tr><tr><td align="left">smalldatetime</td><td align="left">从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。</td><td align="left">4 字节</td></tr><tr><td align="left">date</td><td align="left">仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。</td><td align="left">3 bytes</td></tr><tr><td align="left">time</td><td align="left">仅存储时间。精度为 100 纳秒。</td><td align="left">3-5 字节</td></tr><tr><td align="left">datetimeoffset</td><td align="left">与 datetime2 相同，外加时区偏移。</td><td align="left">8-10 字节</td></tr><tr><td align="left">timestamp</td><td align="left">存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。</td><td align="left"></td></tr></tbody></table><p><strong>其他数据类型：</strong></p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sql_variant</td><td align="left">存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。</td></tr><tr><td align="left">uniqueidentifier</td><td align="left">存储全局唯一标识符 (GUID)。</td></tr><tr><td align="left">xml</td><td align="left">存储 XML 格式化数据。最多 2GB。</td></tr><tr><td align="left">cursor</td><td align="left">存储对用于数据库操作的指针的引用。</td></tr><tr><td align="left">table</td><td align="left">存储结果集，供稍后处理。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis/mybatis-plus</title>
      <link href="/2024/06/27/mybatis-plus/"/>
      <url>/2024/06/27/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-mybatis-plus"><a href="#mybatis-mybatis-plus" class="headerlink" title="mybatis&#x2F;mybatis-plus"></a>mybatis&#x2F;mybatis-plus</h1><h2 id="一、mybatis"><a href="#一、mybatis" class="headerlink" title="一、mybatis"></a>一、mybatis</h2><blockquote><p><a href="https://www.cnblogs.com/ssjxx98/articles/13374663.html">https://www.cnblogs.com/ssjxx98/articles/13374663.html</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/WwLK123/article/details/131859424">https://blog.csdn.net/WwLK123/article/details/131859424</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_44863237/article/details/131122988">https://blog.csdn.net/weixin_44863237/article/details/131122988</a></p></blockquote><p>MyBatis是一个支持普通SQL查询、存储过程和高级映射的优秀持久层框架（ORM框架），可以使用简单的XML或注解配置，将接口和Java的POJO映射成数据库中的记录。</p><p>ORM概念：Object Relational Mapping，“对象关系映射”，解决了对象和关系型数据库之间的数据交互问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据库表---&gt;实体类</span><br><span class="line">数据库表中字段---&gt;实体类的属性</span><br><span class="line">数据库表中字段的类型---&gt;实体类中属性的类型</span><br><span class="line">数据库表中记录---&gt;对象</span><br></pre></td></tr></table></figure><p>实例：</p><p>1.创建UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zpc.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; id</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@return</span>&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; User &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@return</span>&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; user</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; user</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; id</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; id</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@return</span>&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; User &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@return</span>&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; user</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; user</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;span class=&quot;hljs-doctag&quot;&gt;<span class="doctag">@param</span>&lt;/span&gt; id</span></span><br><span class="line"><span class="comment"> */</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt;&lt;/span&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.创建UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zpc.mybatis.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zpc.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;UserDaoImpl&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(SqlSession sqlSession)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; User &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">return</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.selectOne(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.queryUserById&quot;</span>&lt;/span&gt;, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">return</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.selectList(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.queryUserAll&quot;</span>&lt;/span&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.insert(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.insertUser&quot;</span>&lt;/span&gt;, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.update(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.updateUser&quot;</span>&lt;/span&gt;, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.delete(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.deleteUser&quot;</span>&lt;/span&gt;, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;UserDaoImpl&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(SqlSession sqlSession)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession = sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; User &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">return</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.selectOne(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.queryUserById&quot;</span>&lt;/span&gt;, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">return</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.selectList(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.queryUserAll&quot;</span>&lt;/span&gt;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.insert(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.insertUser&quot;</span>&lt;/span&gt;, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(User user)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.update(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.updateUser&quot;</span>&lt;/span&gt;, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Override</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;(String id)&lt;/span&gt; &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.delete(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;UserDao.deleteUser&quot;</span>&lt;/span&gt;, id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.UserDao对应的UserDaoMapper.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;UserDao&quot;</span>&gt;</span><br><span class="line">    &lt;!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一</span><br><span class="line">       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;!--&lt;select id=<span class="string">&quot;queryUserById&quot;</span> resultType=<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&gt;--&gt;</span><br><span class="line">    &lt;!--select * from tb_user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;--&gt;</span><br><span class="line">    &lt;!--&lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;&amp;lt;!--使用别名--&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;queryUserById&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;resultType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">  select</span><br><span class="line">   tuser.id as id,</span><br><span class="line">   tuser.user_name as userName,</span><br><span class="line">   tuser.password as password,</span><br><span class="line">   tuser.name as name,</span><br><span class="line">   tuser.age as age,</span><br><span class="line">   tuser.birthday as birthday,</span><br><span class="line">   tuser.sex as sex,</span><br><span class="line">   tuser.created as created,</span><br><span class="line">   tuser.updated as updated</span><br><span class="line">   from</span><br><span class="line">   tb_user tuser</span><br><span class="line">   where tuser.id = #&#123;id&#125;;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;queryUserAll&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;resultType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    select * from tb_user;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;&amp;lt;!--插入数据--&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;insert&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;insertUser&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;parameterType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    INSERT INTO <span class="title function_">tb_user</span> <span class="params">(</span></span><br><span class="line"><span class="params">    user_name,</span></span><br><span class="line"><span class="params">    password,</span></span><br><span class="line"><span class="params">    name,</span></span><br><span class="line"><span class="params">    age,</span></span><br><span class="line"><span class="params">    sex,</span></span><br><span class="line"><span class="params">    birthday,</span></span><br><span class="line"><span class="params">    created,</span></span><br><span class="line"><span class="params">    updated</span></span><br><span class="line"><span class="params">    )</span></span><br><span class="line">    VALUES</span><br><span class="line">    (</span><br><span class="line">    #&#123;userName&#125;,</span><br><span class="line">    #&#123;password&#125;,</span><br><span class="line">    #&#123;name&#125;,</span><br><span class="line">    #&#123;age&#125;,</span><br><span class="line">    #&#123;sex&#125;,</span><br><span class="line">    #&#123;birthday&#125;,</span><br><span class="line">    now(),</span><br><span class="line">    now()</span><br><span class="line">    );</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;insert&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;update&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;updateUser&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;parameterType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    UPDATE tb_user</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;trim&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;prefix&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;set&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;suffixOverrides&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;,&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;userName!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;user_name = #&#123;userName&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;password!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;password = #&#123;password&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;name!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;name = #&#123;name&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;age!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;age = #&#123;age&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;sex!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;sex = #&#123;sex&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;birthday!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;birthday = #&#123;birthday&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        updated = now(),</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;trim&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    WHERE</span><br><span class="line">    (id = #&#123;id&#125;);</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;update&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;delete&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;deleteUser&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    delete from tb_user where id=#&#123;id&#125;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;delete&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;&amp;lt;!--使用别名--&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;queryUserById&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;resultType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">  select</span><br><span class="line">   tuser.id as id,</span><br><span class="line">   tuser.user_name as userName,</span><br><span class="line">   tuser.password as password,</span><br><span class="line">   tuser.name as name,</span><br><span class="line">   tuser.age as age,</span><br><span class="line">   tuser.birthday as birthday,</span><br><span class="line">   tuser.sex as sex,</span><br><span class="line">   tuser.created as created,</span><br><span class="line">   tuser.updated as updated</span><br><span class="line">   from</span><br><span class="line">   tb_user tuser</span><br><span class="line">   where tuser.id = #&#123;id&#125;;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;queryUserAll&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;resultType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    select * from tb_user;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;&amp;lt;!--插入数据--&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;insert&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;insertUser&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;parameterType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    INSERT INTO <span class="title function_">tb_user</span> <span class="params">(</span></span><br><span class="line"><span class="params">    user_name,</span></span><br><span class="line"><span class="params">    password,</span></span><br><span class="line"><span class="params">    name,</span></span><br><span class="line"><span class="params">    age,</span></span><br><span class="line"><span class="params">    sex,</span></span><br><span class="line"><span class="params">    birthday,</span></span><br><span class="line"><span class="params">    created,</span></span><br><span class="line"><span class="params">    updated</span></span><br><span class="line"><span class="params">    )</span></span><br><span class="line">    VALUES</span><br><span class="line">    (</span><br><span class="line">    #&#123;userName&#125;,</span><br><span class="line">    #&#123;password&#125;,</span><br><span class="line">    #&#123;name&#125;,</span><br><span class="line">    #&#123;age&#125;,</span><br><span class="line">    #&#123;sex&#125;,</span><br><span class="line">    #&#123;birthday&#125;,</span><br><span class="line">    now(),</span><br><span class="line">    now()</span><br><span class="line">    );</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;insert&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;update&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;updateUser&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;parameterType&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    UPDATE tb_user</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;trim&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;prefix&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;set&quot;</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;suffixOverrides&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;,&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;userName!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;user_name = #&#123;userName&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;password!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;password = #&#123;password&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;name!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;name = #&#123;name&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;age!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;age = #&#123;age&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;sex!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;sex = #&#123;sex&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;test&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;birthday!=null&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;birthday = #&#123;birthday&#125;,&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;<span class="keyword">if</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">        updated = now(),</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;trim&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    WHERE</span><br><span class="line">    (id = #&#123;id&#125;);</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;update&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;delete&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-attr&quot;</span>&gt;id&lt;/span&gt;=&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;deleteUser&quot;</span>&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">    delete from tb_user where id=#&#123;id&#125;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-tag&quot;</span>&gt;&amp;lt;/&lt;span class=<span class="string">&quot;hljs-name&quot;</span>&gt;delete&lt;/span&gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并在mybatis-config.xml中添加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mappers/MyMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mappers/UserDaoMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zpc.mybatis.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zpc.mybatis.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.zpc.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; UserDao userDao;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Before</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;setUp&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// mybatis-config.xml&lt;/span&gt;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;mybatis-config.xml&quot;</span>&lt;/span&gt;;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 读取配置文件&lt;/span&gt;</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 构建SqlSessionFactory&lt;/span&gt;</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 获取sqlSession&lt;/span&gt;</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao = &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; UserDaoImpl(sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    System.out.println(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.queryUserById(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1&quot;</span>&lt;/span&gt;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    List&amp;lt;User&amp;gt; userList = &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.queryUserAll();</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">for</span>&lt;/span&gt; (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; User();</span><br><span class="line">    user.setAge(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">16</span>&lt;/span&gt;);</span><br><span class="line">    user.setBirthday(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; Date(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1990/09/02&quot;</span>&lt;/span&gt;));</span><br><span class="line">    user.setName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;大鹏&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setPassword(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;123456&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setSex(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">1</span>&lt;/span&gt;);</span><br><span class="line">    user.setUserName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;evan&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.insertUser(user);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; User();</span><br><span class="line">    user.setBirthday(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; Date());</span><br><span class="line">    user.setName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;静鹏&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setPassword(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;654321&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setSex(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">1</span>&lt;/span&gt;);</span><br><span class="line">    user.setUserName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;evanjin&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setId(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.updateUser(user);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.deleteUser(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;4&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; UserDao userDao;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Before</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;setUp&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// mybatis-config.xml&lt;/span&gt;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;mybatis-config.xml&quot;</span>&lt;/span&gt;;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 读取配置文件&lt;/span&gt;</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 构建SqlSessionFactory&lt;/span&gt;</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-comment&quot;</span>&gt;<span class="comment">// 获取sqlSession&lt;/span&gt;</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao = &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; UserDaoImpl(sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserById&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    System.out.println(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.queryUserById(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1&quot;</span>&lt;/span&gt;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;queryUserAll&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    List&amp;lt;User&amp;gt; userList = &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.queryUserAll();</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">for</span>&lt;/span&gt; (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;insertUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; User();</span><br><span class="line">    user.setAge(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">16</span>&lt;/span&gt;);</span><br><span class="line">    user.setBirthday(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; Date(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1990/09/02&quot;</span>&lt;/span&gt;));</span><br><span class="line">    user.setName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;大鹏&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setPassword(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;123456&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setSex(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">1</span>&lt;/span&gt;);</span><br><span class="line">    user.setUserName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;evan&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.insertUser(user);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;updateUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; User();</span><br><span class="line">    user.setBirthday(&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">new</span>&lt;/span&gt; Date());</span><br><span class="line">    user.setName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;静鹏&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setPassword(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;654321&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setSex(&lt;span class=<span class="string">&quot;hljs-number&quot;</span>&gt;<span class="number">1</span>&lt;/span&gt;);</span><br><span class="line">    user.setUserName(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;evanjin&quot;</span>&lt;/span&gt;);</span><br><span class="line">    user.setId(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;1&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.updateUser(user);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-meta&quot;</span>&gt;<span class="meta">@Test</span>&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;hljs-function&quot;</span>&gt;&lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">public</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">void</span>&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-title&quot;</span>&gt;deleteUser&lt;/span&gt;&lt;span class=<span class="string">&quot;hljs-params&quot;</span>&gt;()&lt;/span&gt; &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="keyword">throws</span>&lt;/span&gt; Exception &lt;/span&gt;&#123;</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.userDao.deleteUser(&lt;span class=<span class="string">&quot;hljs-string&quot;</span>&gt;<span class="string">&quot;4&quot;</span>&lt;/span&gt;);</span><br><span class="line">    &lt;span class=<span class="string">&quot;hljs-keyword&quot;</span>&gt;<span class="built_in">this</span>&lt;/span&gt;.sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><h4 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h4><p>解决判断空的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test=&quot;判断条件&quot;&gt; SQL语句&lt;/if&gt;</span><br></pre></td></tr></table></figure><h4 id="2-where"><a href="#2-where" class="headerlink" title="2.where"></a>2.where</h4><p>where+if可以实现查询、模糊查询等</p><p>在&lt;where&gt;and&lt;&#x2F;where&gt;包围中的and、or只起到拼接作用</p><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。 </p><h4 id="3-set"><a href="#3-set" class="headerlink" title="3.set"></a>3.set</h4><p>用来修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upd&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname=#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd=#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex=#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone=#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    sid=#&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where sid=#&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-choose"><a href="#4-choose" class="headerlink" title="4.choose"></a>4.choose</h4><p>choose+when+otherwise相当于switch语句，符合条件才会执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectUserByChoose&quot; resultType<span class="operator">=</span>&quot;com.ys.po.User&quot; parameterType<span class="operator">=</span>&quot;com.ys.po.User&quot;<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">          <span class="operator">&lt;</span>choose<span class="operator">&gt;</span></span><br><span class="line">              <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;id !=&#x27;&#x27; and id != null&quot;<span class="operator">&gt;</span></span><br><span class="line">                  id<span class="operator">=</span>#&#123;id&#125;</span><br><span class="line">              <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">              <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;username !=&#x27;&#x27; and username != null&quot;<span class="operator">&gt;</span></span><br><span class="line">                  <span class="keyword">and</span> username<span class="operator">=</span>#&#123;username&#125;</span><br><span class="line">              <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">              <span class="operator">&lt;</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">                  <span class="keyword">and</span> sex<span class="operator">=</span>#&#123;sex&#125;</span><br><span class="line">              <span class="operator">&lt;</span><span class="operator">/</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">          <span class="operator">&lt;</span><span class="operator">/</span>choose<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，这里我们有三个条件，id、username、sex，只能选择一个作为查询条件</p><ul><li>如果 id 不为空，那么查询语句为：select * from user where id&#x3D;?</li><li>如果 id 为空，那么看username 是否为空，如果不为空，那么语句为select * from user where username&#x3D;?;</li><li>如果 username 为空，那么查询语句为 select * from user where sex&#x3D;?</li></ul><h4 id="5-trim标记"><a href="#5-trim标记" class="headerlink" title="5.trim标记"></a>5.trim标记</h4><p>格式化标记，完成set或者是where标记的功能</p><p>1.trim改写where+if语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUsernameAndSex&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="comment">&lt;!-- &lt;where&gt;</span></span><br><span class="line"><span class="comment">        &lt;if test=&quot;username != null&quot;&gt;</span></span><br><span class="line"><span class="comment">           username=#&#123;username&#125;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        &lt;if test=&quot;username != null&quot;&gt;</span></span><br><span class="line"><span class="comment">           and sex=#&#123;sex&#125;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">    &lt;/where&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and | or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">           and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">           and sex=#&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>prefix：前缀</li><li>prefixoverride：去掉第一个and或者是or</li></ul><p>2.trim改写if+set语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 id 更新 user 表的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">    update user u</span><br><span class="line">        <span class="comment">&lt;!-- &lt;set&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test=&quot;username != null and username != &#x27;&#x27;&quot;&gt;</span></span><br><span class="line"><span class="comment">                u.username = #&#123;username&#125;,</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test=&quot;sex != null and sex != &#x27;&#x27;&quot;&gt;</span></span><br><span class="line"><span class="comment">                u.sex = #&#123;sex&#125;</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        &lt;/set&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                u.username = #&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                u.sex = #&#123;sex&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>suffix：后缀</li><li>suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）</li></ul><p>3.trim+if同时添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert  into student</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span><span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span>  <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-foreach"><a href="#6-foreach" class="headerlink" title="6.foreach"></a>6.foreach</h4><p>遍历集合，通常用来处理in语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 批量查询</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span> WHERE sid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;ids&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">// 批量删除</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    delete  from  student  where  sid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;ids&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-sql标签"><a href="#7-sql标签" class="headerlink" title="7.sql标签"></a>7.sql标签</h4><p>抽取相同sql语句,通常结合include使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 你在外面使用sql标签</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectvp&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-include"><a href="#8-include" class="headerlink" title="8.include"></a>8.include</h4><p>refid这个属性就是指定<code>&lt;sql&gt;</code>标签中的id值（唯一标识）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findbyid&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sid != null&quot;</span>&gt;</span></span><br><span class="line">        AND sid like #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-xml交叉引用"><a href="#10-xml交叉引用" class="headerlink" title="10.xml交叉引用"></a>10.xml交叉引用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// com.xxx.dao.xxMapper对应xml</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span> ID,MAJOR,BIRTHDAY,AGE,NAME,HOBBY<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// com.xxx.dao.PatinetMapper对应xml引用Base_Column_List要在refid上加上完整路径</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.xxx.dao.xxMapper.Base_Column_List&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、mybatis-plus"><a href="#二、mybatis-plus" class="headerlink" title="二、mybatis-plus"></a>二、mybatis-plus</h2><p>MyBatis-Plus（简称 MP）是一个基于 MyBatis 的增强工具，它对 Mybatis 的基础功能进行了增强，但未做任何改变。</p><p>使得我们可以可以在 Mybatis 开发的项目上直接进行升级为 Mybatis-plus，正如它对自己的定位，它能够帮助我们进一步简化开发过程，提高开发效率。</p><p>Mybatis-Plus 其实可以看作是对 Mybatis 的再一次封装，升级之后，对于单表的 CRUD 操作，调用 Mybatis-Plus 所提供的 API 就能够轻松实现，此外还提供了各种查询方式、分页等行为。</p><p>最最重要的，开发人员还不用去编写 XML，这就大大降低了开发难度.</p><p>mybatis-plus优点</p><ul><li><strong>无侵入：</strong>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小：</strong>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作，BaseMapper</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求，简单的CRUD操作不用自己编写。</li><li><strong>支持 Lambda 形式调用：</strong>通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成：</strong>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式：</strong>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作：</strong>支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器：</strong>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（自动生成代码）</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库：</strong>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件：</strong>可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件：</strong>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="1、mybatis-plus常用注解"><a href="#1、mybatis-plus常用注解" class="headerlink" title="1、mybatis-plus常用注解"></a>1、mybatis-plus常用注解</h3><blockquote><p><a href="https://blog.csdn.net/qq_42057154/article/details/126624150">https://blog.csdn.net/qq_42057154/article/details/126624150</a></p></blockquote><blockquote><p><a href="https://www.jb51.net/program/293748vse.htm">https://www.jb51.net/program/293748vse.htm</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/davis12/p/17933803.html">https://www.cnblogs.com/davis12/p/17933803.html</a></p></blockquote><ul><li>@Tablename</li></ul><p>若不指定表名，则以对应的实体类名为表名</p><p>多用于entity包下实体类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给类下的所有属性添加Setter/Getter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//给id属性添加Setter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//给username的setter方法设置私有权限</span></span><br><span class="line">    <span class="meta">@Setter(AccessLevel.PRIVATE)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//取消password的Getter方法</span></span><br><span class="line">    <span class="meta">@Getter(AccessLevel.NONE)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应源码解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码解释</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableName &#123;</span><br><span class="line">    <span class="comment">//实体对应表名</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">schema</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">keepGlobalPrefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">resultMap</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">autoResultMap</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//需要排除的属性名</span></span><br><span class="line">    String[] excludeProperty() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TableId</li></ul><p>@TableId(value&#x3D;“数据库主键字段”,type &#x3D; IdType.值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span><br><span class="line">private Integer id;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//源码</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line">public @interface TableId &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    IdType type() default IdType.NONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">string</td><td align="left">“”</td><td align="left">主键字段名</td></tr><tr><td align="left">type</td><td align="left">Enum</td><td align="left">IdType.NONE</td><td align="left">主键类型</td></tr></tbody></table><blockquote><p><a href="https://blog.csdn.net/weixin_44259233/article/details/122189281">https://blog.csdn.net/weixin_44259233/article/details/122189281</a></p></blockquote><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Auto</td><td align="left">数据库ID自增</td></tr><tr><td align="left">Input</td><td align="left">自行输入</td></tr><tr><td align="left">NONE</td><td align="left">无状态</td></tr><tr><td align="left">ASSIGN_UUID</td><td align="left">32位UUID字符串</td></tr><tr><td align="left">ASSIGN_ID</td><td align="left">雪花算法自动生成主键ID</td></tr></tbody></table><p><strong>雪花算法</strong>（雪花）是微博开源的分布式ID生成算法其核心思想就是：使用一个64位的长型的数字作为全局唯一ID。在分布式系统中的应用十分广泛，且ID引入了时间戳，基本上保持自增的。</p><hr><p><strong>背景</strong><br>需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。</p><p>数据库的扩展方式主要包括：业务分库、主从复制，数据库分表。</p><p><strong>数据库分表</strong><br>将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。</p><p>单表数据拆分有两种方式：垂直分表和水平分表。示意图如下：<br><img src="D:\下载\阿里云盘下载\工作\Java面试\mybatis-plus.assets\image-20240625135929290.png" alt="image-20240625135929290"></p><p><strong>垂直分表</strong><br>垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。</p><p>例如，前面示意图中的 nickname 和 description 字段，假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><p><strong>水平分表</strong><br>水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000 万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。</p><p>但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性能瓶颈或者隐患。</p><p>水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处理。</p><p><strong>主键自增</strong></p><p>以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1中，1000000 ~ 1999999 放到表2中，以此类推。</p><p>复杂点：分段大小的选取。分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。</p><p>优点：可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。</p><p>缺点：分布不均匀。假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1 条，而另外一个分段实际存储的数据量有 1000 万条。</p><p><strong>取模</strong></p><p>同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号为 6 的子表中。</p><p>复杂点：初始表数量的确定。表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。</p><p>优点：表分布比较均匀。</p><p>缺点：扩充新的表很麻烦，所有数据都要重分布。</p><p><strong>雪花算法</strong><br>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。</p><p><strong>核心思想</strong></p><p>长度共64bit（一个long型）。</p><p>首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0。</p><p>41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。</p><p>10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。</p><p>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。<br><img src="D:\下载\阿里云盘下载\工作\Java面试\mybatis-plus.assets\image-20240625135908784.png" alt="image-20240625135908784"></p><p>优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。</p><blockquote><p><a href="https://blog.csdn.net/bangyanya/article/details/134182630">https://blog.csdn.net/bangyanya/article/details/134182630</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/qq_42057154/article/details/126624150">https://blog.csdn.net/qq_42057154/article/details/126624150</a></p></blockquote><hr><ul><li>@TableField</li></ul><p>1、主要用来解决实体类的字段名与数据库中的字段名不匹配的问题（数据库user_addr，字段useraddr未驼峰）</p><p>2、实体类中的属性字段在表中不存在的问题</p><p>3、表示自动填充字段一般用于字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;tb_user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    //给id属性添加Setter</span><br><span class="line">    @Setter</span><br><span class="line">    @TableId(value = &quot;id&quot;,type = IdType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line">    //给username的setter方法设置私有权限</span><br><span class="line">    @Setter(AccessLevel.PRIVATE)</span><br><span class="line">    @TableField(value = &quot;username&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    //取消password的Getter方法</span><br><span class="line">    @Getter(AccessLevel.NONE)</span><br><span class="line">    private String password;</span><br><span class="line">    private static int age;</span><br><span class="line">    private final String address = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableField &#123;</span><br><span class="line"><span class="comment">//通过设置该值，对应到数据库表的字段名。</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//主要指明字段在不在数据库表中，如果 false 则不在数据库表中</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//设定值，进而是否开启如模糊查询。</span></span><br><span class="line">    String <span class="title function_">condition</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">update</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    FieldStrategy <span class="title function_">insertStrategy</span><span class="params">()</span> <span class="keyword">default</span> FieldStrategy.DEFAULT;</span><br><span class="line"></span><br><span class="line">    FieldStrategy <span class="title function_">updateStrategy</span><span class="params">()</span> <span class="keyword">default</span> FieldStrategy.DEFAULT;</span><br><span class="line"></span><br><span class="line">    FieldStrategy <span class="title function_">whereStrategy</span><span class="params">()</span> <span class="keyword">default</span> FieldStrategy.DEFAULT;</span><br><span class="line"><span class="comment">//这里涉及自动填充，在哪些场景中会用到呢，如 插入、更新、更改的时间，我们希望自动填入，其原理其实也是通过设置实体的值，进而达到自动填入的功能。</span></span><br><span class="line">    FieldFill <span class="title function_">fill</span><span class="params">()</span> <span class="keyword">default</span> FieldFill.DEFAULT;</span><br><span class="line"><span class="comment">//注明查到的字段是否要出现在返回结果中，某些场景中，如 User 表中，可能有 password ，对于这种敏感的字段，是不是可以不用返回呢。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">select</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">keepGlobalFormat</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">property</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    JdbcType <span class="title function_">jdbcType</span><span class="params">()</span> <span class="keyword">default</span> JdbcType.UNDEFINED;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">TypeHandler</span>&gt; typeHandler() <span class="keyword">default</span> UnknownTypeHandler.class;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">javaType</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">numericScale</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fill解释</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>DEFAULT</td><td>默认不处理</td></tr><tr><td>INSERT</td><td>插入时填充字段</td></tr><tr><td>UPDATE</td><td>更新时填充字段</td></tr><tr><td>INSERT_UPDATE</td><td>插入和更新时填充字段</td></tr></tbody></table><p><strong>如果设置了该 fill 属性，则我们需要去实现或者继承 <code>MetaObjectHandler</code> 接口</strong></p><blockquote><p><a href="https://www.cnblogs.com/davis12/p/17933803.html">https://www.cnblogs.com/davis12/p/17933803.html</a></p></blockquote><ul><li>@TableLogic</li></ul><p><strong>逻辑删除注解</strong>: 一般用于项目中的逻辑删除字段上添加该注解</p><p><strong>效果：</strong>在字段上加上这个注解再执行BaseMapper的删除方法时，删除方法会变成修改</p><p><strong>执行是效果：</strong>　　　　　　</p><ul><li>加@TableLogic的情况下　　　　</li><li>sql：UPDATE 表名 SET deleted&#x3D;2 WHERE id&#x3D;? AND deleted&#x3D;0　　　　　  </li><li>不加@TableLogic的情况下　　　　　　</li><li>走 delete from 表名 where id&#x3D;值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value = &quot;&quot; 默认的原值　　　　</span></span><br><span class="line"><span class="comment">//delval = &quot;&quot; 删除后的值　　　　</span></span><br><span class="line"><span class="comment">//@TableLogic(value=&quot;原值&quot;,delval=&quot;改值&quot;)</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><ul><li>@EnumValue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line">    MALE(<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    GenderEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@TableField(&quot;gender&quot;)</span><br><span class="line">private GenderEnum gender;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/gli_001/article/details/126877012">https://blog.csdn.net/gli_001/article/details/126877012</a></p></blockquote><h3 id="2、mybatis-plus-crud"><a href="#2、mybatis-plus-crud" class="headerlink" title="2、mybatis-plus crud"></a>2、mybatis-plus crud</h3><blockquote><p><a href="https://blog.csdn.net/weixin_47872288/article/details/135305933">https://blog.csdn.net/weixin_47872288/article/details/135305933</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_74383330/article/details/135251245">https://blog.csdn.net/weixin_74383330/article/details/135251245</a></p></blockquote><blockquote><p><a href="https://www.jb51.net/program/302756bp6.htm">https://www.jb51.net/program/302756bp6.htm</a></p></blockquote><p><strong>mybatis-plus增删改查</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo1.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo1.model.eneity.GenderEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.demo1.model.eneity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 新增一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">//        user.setId(1);</span></span><br><span class="line">        user.setUsername(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;sssss&quot;</span>);</span><br><span class="line">        user.setGender(GenderEnum.FEMALE);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据id删除一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deleteById</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">5</span>);</span><br><span class="line">        System.out.println(deleteById);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据id删除多条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest2</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; idList = Arrays.asList(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">deleteByIds</span> <span class="operator">=</span> userMapper.deleteBatchIds(idList);</span><br><span class="line">        <span class="comment">//删除了多少行</span></span><br><span class="line">        System.out.println(deleteByIds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 删除map字段值,注意此处的Map类型是&lt;String,Object&gt;，而不是自身两个属性的值</span></span><br><span class="line"><span class="comment">     * ？？？</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest3</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;map_username&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;map_password&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">delete3</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">        <span class="comment">// 删除了多少行</span></span><br><span class="line">        System.out.println(delete3);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;ceshi&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">delete4</span> <span class="operator">=</span> userMapper.delete(wrapper);</span><br><span class="line">        <span class="comment">// 删除了多少行</span></span><br><span class="line">        System.out.println(delete4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 更新表中指定字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;saZki1&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;pass1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 批量更新表中指定字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        <span class="comment">// 此处可以通过like，对搜出来的大部分进行批量修改！</span></span><br><span class="line">        <span class="comment">//wrapper.like(&quot;address&quot;,&quot;江苏省宿迁市&quot;);</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;saZki&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user,wrapper);</span><br><span class="line">        <span class="comment">//修改记录条数</span></span><br><span class="line">        System.out.println(update);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;saZki&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//queryWrapper查询</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//另外一种方式，根据 LambdaQueryWrapper 的条件查询</span></span><br><span class="line"><span class="comment">//        User user1 = userMapper.selectOne(</span></span><br><span class="line"><span class="comment">//                new LambdaQueryWrapper&lt;User&gt;().like(User::getUsername,&quot;saZki&quot;)</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"><span class="comment">//        System.out.println(user1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据id批量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest3</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(list);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"><span class="comment">//        for (User user : users) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(user);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过map条件查找</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest4</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;saZki&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users  = userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 查询全部记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest5</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line"><span class="comment">//        users.forEach(System.out::println);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h4><blockquote><p><a href="https://blog.csdn.net/zoroly/article/details/131507643">https://blog.csdn.net/zoroly/article/details/131507643</a></p></blockquote><p>MyBatis-Plus 通过 EntityWrapper（简称 EW，MP 封装的一个查询条件构造器）或者 Condition（与 EW 类似） 来让用户自由的构建查询条件，简单便捷，没有额外的负担， 能够有效提高开发效率，它主要用于处理 sql 拼接，排序，实体参数查询等。</p><p>注意：使用的是数据库字段，不是 Java 属性！</p><p>警告：MyBatis-Plus不支持以及不赞成在 RPC 调用中把 Wrapper 进行传输，Wrapper 很重，传输 Wrapper 可以类比为你的 controller 用 map 接收值(开发一时爽，维护火葬场)，正确的 RPC 调用姿势是写一个 DTO 进行传输，被调用方再根据 DTO 执行相应的操作。</p><h5 id="1、Wrapper介绍"><a href="#1、Wrapper介绍" class="headerlink" title="1、Wrapper介绍"></a>1、Wrapper介绍</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/eb78865fb3f70a91ab63cf7517f6deca.png" alt="image-20220521092812125"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Wrapper ： 条件构造抽象类，最顶端父类</span><br><span class="line">AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</span><br><span class="line"></span><br><span class="line">QueryWrapper ： 查询条件封装</span><br><span class="line"></span><br><span class="line">UpdateWrapper ： Update 条件封装</span><br><span class="line"></span><br><span class="line">AbstractLambdaWrapper ： 使用Lambda 语法</span><br><span class="line"></span><br><span class="line">LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</span><br><span class="line"></span><br><span class="line">LambdaUpdateWrapper ： Lambda 更新封装Wrapper</span><br></pre></td></tr></table></figure><h5 id="2、QueryWrapper"><a href="#2、QueryWrapper" class="headerlink" title="2、QueryWrapper"></a>2、QueryWrapper</h5><ul><li>组装查询条件</li></ul><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test01()&#123;</span><br><span class="line">    //查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(&quot;username&quot;,&quot;a&quot;).between(&quot;age&quot;,20,30).isNotNull(&quot;email&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组装排序条件</li></ul><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test02()&#123;</span><br><span class="line">    //查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByDesc(&quot;age&quot;).orderByAsc(&quot;id&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组装删除条件</li></ul><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted&#x3D;1 WHERE is_deleted&#x3D;0 AND (email IS NULL)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void test03()&#123;</span><br><span class="line">    //删除邮箱地址为null的用户信息</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(&quot;email&quot;);</span><br><span class="line">    int result = userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);</span><br><span class="line">    System.out.println(&quot;受影响的行数为：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>条件的优先级</li></ul><p><strong>执行SQL：</strong>UPDATE t_user SET user_name&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void test04()&#123;</span><br><span class="line">    //将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.gt(&quot;age&quot;,20).like(&quot;username&quot;,&quot;a&quot;).or().isNull(&quot;email&quot;);</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setName(&quot;Oz&quot;);</span><br><span class="line">    user.setEmail(&quot;test@oz6.com&quot;);</span><br><span class="line"></span><br><span class="line">    int result = userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);</span><br><span class="line">    System.out.println(&quot;受影响的行数为：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行SQL：</strong>UPDATE t_user SET username&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void test05()&#123;</span><br><span class="line">    //将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.like(&quot;username&quot;,&quot;a&quot;).and(i-&gt;i.gt(&quot;age&quot;,20).or().isNull(&quot;email&quot;));</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setName(&quot;Vz7797&quot;);</span><br><span class="line">    user.setEmail(&quot;test@ss8o.com&quot;);</span><br><span class="line"></span><br><span class="line">    int result = userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);</span><br><span class="line">    System.out.println(&quot;受影响的行数为：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组装select子句</li></ul><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted&#x3D;0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test06()&#123;</span><br><span class="line">    //查询用户的用户名、年龄、邮箱信息</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.select(&quot;username&quot;,&quot;age&quot;,&quot;email&quot;);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现子查询</li></ul><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (uid IN (select uid from t_user where uid &lt;&#x3D; 100))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test07()&#123;</span><br><span class="line">    //查询id小于等于100的用户信息</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(&quot;uid&quot;, &quot;select uid from t_user where uid &lt;= 100&quot;);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h5><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void test08()&#123;</span><br><span class="line">    //将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.like(&quot;username&quot;,&quot;a&quot;).and( i -&gt; i.gt(&quot;age&quot;,20).or().isNull(&quot;email&quot;)).set(&quot;email&quot;,&quot;svip@qq.com&quot;);</span><br><span class="line">    int result = userMapper.update(null, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);</span><br><span class="line">    System.out.println(&quot;受影响的行数为：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h5><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p><p>思路一</p><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (user_name LIKE ? AND age &lt;&#x3D; ?)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void test09()&#123;</span><br><span class="line">    String username = &quot;a&quot;;</span><br><span class="line">    Integer ageBegin = null;</span><br><span class="line">    Integer ageEnd = 30;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    if(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">        //isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span><br><span class="line">        queryWrapper.like(&quot;user_name&quot;, username);</span><br><span class="line">    &#125;</span><br><span class="line">    if(ageBegin != null)&#123;</span><br><span class="line">        queryWrapper.ge(&quot;age&quot;, ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    if(ageEnd != null)&#123;</span><br><span class="line">        queryWrapper.le(&quot;age&quot;, ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二</p><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void test10()&#123;</span><br><span class="line">    String username = &quot;a&quot;;</span><br><span class="line">    Integer ageBegin = null;</span><br><span class="line">    Integer ageEnd = 30;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), &quot;user_name&quot;, username)</span><br><span class="line">        .ge(ageBegin != null, &quot;age&quot;, ageBegin)</span><br><span class="line">        .le(ageEnd != null, &quot;age&quot;, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h5><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void test11()&#123;</span><br><span class="line">    String username = &quot;a&quot;;</span><br><span class="line">    Integer ageBegin = null;</span><br><span class="line">    Integer ageEnd = 30;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">        .ge(ageBegin != null, User::getAge, ageBegin)</span><br><span class="line">        .le(ageEnd != null, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h5><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test12()&#123;</span><br><span class="line">    //将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = new LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getName, &quot;a&quot;)</span><br><span class="line">        .and(i -&gt; i.gt(User::getAge, 20).or().isNull(User::getEmail));</span><br><span class="line">    updateWrapper.set(User::getName, &quot;小黑&quot;).set(User::getEmail,&quot;abc@atguigu.com&quot;);</span><br><span class="line">    int result = userMapper.update(null, updateWrapper);</span><br><span class="line">    System.out.println(&quot;result：&quot;+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-构造器的使用"><a href="#7-构造器的使用" class="headerlink" title="7.构造器的使用"></a>7.构造器的使用</h5><p>7.1 allEq</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br></pre></td></tr></table></figure><p>全部 eq (或个别 isNull）<br>个别参数说明：</p><p>params：key为数据库字段名，value为字段值<br>null2IsNull：为true则在map的value为null时调用 isNull方法，为false时则忽略value为null的</p><p>例1: allEq({id:1,name:”老王”,age:null})—&gt;id &#x3D; 1 and name &#x3D; ‘老王’ and age is null<br>例2: allEq({id:1,name:”老王”,age:null}, false)—&gt;id &#x3D; 1 and name &#x3D; ‘老王’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull) </span><br><span class="line">个别参数说明：</span><br></pre></td></tr></table></figure><p>filter : 过滤函数，是否允许字段传入比对条件中<br>params 与 null2IsNull : 同上</p><p>例1: allEq((k,v) -&gt; k.indexOf(“a”) &gt;&#x3D; 0, {id:1,name:“老王”,age:null})—&gt;name &#x3D; ‘老王’ and age is null<br>例2: allEq((k,v) -&gt; k.indexOf(“a”) &gt;&#x3D; 0, {id:1,name:“老王”,age:null}, false)—&gt;name &#x3D; ‘老王’</p><p>7.2 eq</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>等于 &#x3D;<br>例: eq(“name”, “老王”)—&gt;name &#x3D; ‘老王’<br>7.3 ne</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>不等于 &lt;&gt;<br>例: ne(“name”, “老王”)—&gt;name &lt;&gt; ‘老王’<br>7.4 gt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>大于 &gt;<br>例: gt(“age”, 18)—&gt;age &gt; 18<br>7.5 ge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>大于等于 &gt;&#x3D;<br>例: ge(“age”, 18)—&gt;age &gt;&#x3D; 18<br>7.6 lt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>小于 &lt;<br>例: lt(“age”, 18)—&gt;age &lt; 18<br>7.7 le</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>小于等于 &lt;&#x3D;<br>例: le(“age”, 18)—&gt;age &lt;&#x3D; 18<br>7.8 between</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(boolean condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><p>BETWEEN 值1 AND 值2<br>例: between(“age”, 18, 30)—&gt;age between 18 and 30<br>7.9 notBetween</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(boolean condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><p>NOT BETWEEN 值1 AND 值2<br>例: notBetween(“age”, 18, 30)—&gt;age not between 18 and 30<br>7.10 like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>LIKE ‘%值%’<br>例: like(“name”, “王”)—&gt;name like ‘%王%’<br>7.11 notLike</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>NOT LIKE ‘%值%’<br>例: notLike(“name”, “王”)—&gt;name not like ‘%王%’<br>7.12 likeLeft</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeLeft(R column, Object val)</span><br><span class="line">likeLeft(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>LIKE ‘%值’<br>例: likeLeft(“name”, “王”)—&gt;name like ‘%王’<br>7.13 likeRight</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeRight(R column, Object val)</span><br><span class="line">likeRight(boolean condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>LIKE ‘值%’<br>例: likeRight(“name”, “王”)—&gt;name like ‘王%’<br>7.14 isNull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(boolean condition, R column)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字段 IS NULL<br>例: isNull(“name”)—&gt;name is null<br>7.15 isNotNull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNotNull(R column)</span><br><span class="line">isNotNull(boolean condition, R column)</span><br></pre></td></tr></table></figure><p>字段 IS NOT NULL<br>例: isNotNull(“name”)—&gt;name is not null<br>7.16 in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(boolean condition, R column, Collection&lt;?&gt; value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字段 IN (value.get(0), value.get(1), …)<br>例: in(“age”,{1,2,3})—&gt;age in (1,2,3)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Object... values)</span><br><span class="line">in(boolean condition, R column, Object... values)</span><br></pre></td></tr></table></figure><p>字段 IN (v0, v1, …)<br>例: in(“age”, 1, 2, 3)—&gt;age in (1,2,3)<br>7.17 notIn</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(boolean condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><p>字段 NOT IN (value.get(0), value.get(1), …)<br>例: notIn(“age”,{1,2,3})—&gt;age not in (1,2,3)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Object... values)</span><br><span class="line">notIn(boolean condition, R column, Object... values)</span><br></pre></td></tr></table></figure><p>字段 NOT IN (v0, v1, …)<br>例: notIn(“age”, 1, 2, 3)—&gt;age not in (1,2,3)<br>7.18 inSql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(boolean condition, R column, String inValue)</span><br></pre></td></tr></table></figure><p>字段 IN ( sql语句 )<br>例: inSql(“age”, “1,2,3,4,5,6”)—&gt;age in (1,2,3,4,5,6)<br>例: inSql(“id”, “select id from table where id &lt; 3”)—&gt;id in (select id from table where id &lt; 3)</p><p>7.19 notInSql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(boolean condition, R column, String inValue)</span><br></pre></td></tr></table></figure><p>字段 NOT IN ( sql语句 )<br>例: notInSql(“age”, “1,2,3,4,5,6”)—&gt;age not in (1,2,3,4,5,6)<br>例: notInSql(“id”, “select id from table where id &lt; 3”)—&gt;id not in (select id from table where id &lt; 3)</p><p>7.20 groupBy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(boolean condition, R... columns)</span><br></pre></td></tr></table></figure><p>分组：GROUP BY 字段, …<br>例: groupBy(“id”, “name”)—&gt;group by id,name<br>7.21 orderByAsc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(boolean condition, R... columns)</span><br></pre></td></tr></table></figure><p>排序：ORDER BY 字段, … ASC<br>例: orderByAsc(“id”, “name”)—&gt;order by id ASC,name ASC<br>7.22 orderByDesc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByDesc(R... columns)</span><br><span class="line">orderByDesc(boolean condition, R... columns)</span><br></pre></td></tr></table></figure><p>排序：ORDER BY 字段, … DESC<br>例: orderByDesc(“id”, “name”)—&gt;order by id DESC,name DESC<br>7.23 orderBy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderBy(boolean condition, boolean isAsc, R... columns)</span><br></pre></td></tr></table></figure><p>排序：ORDER BY 字段, …<br>例: orderBy(true, true, “id”, “name”)—&gt;order by id ASC,name ASC<br>7.24 having</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">having(String sqlHaving, Object... params)</span><br><span class="line">having(boolean condition, String sqlHaving, Object... params)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HAVING ( sql语句 )<br>例: having(“sum(age) &gt; 10”)—&gt;having sum(age) &gt; 10<br>例: having(“sum(age) &gt; {0}”, 11)—&gt;having sum(age) &gt; 11<br>7.25 func</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func(Consumer&lt;Children&gt; consumer)</span><br><span class="line">func(boolean condition, Consumer&lt;Children&gt; consumer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func 方法(主要方便在出现if…else下调用不同方法能不断链)<br>例: func(i -&gt; if(true) {i.eq(“id”, 1)} else {i.ne(“id”, 1)})<br>7.26 or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or()</span><br><span class="line">or(boolean condition)</span><br></pre></td></tr></table></figure><p>拼接 OR<br>注意事项:</p><p>主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接)</p><p>例: eq(“id”,1).or().eq(“name”,”老王”)—&gt;id &#x3D; 1 or name &#x3D; ‘老王’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(boolean condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><p>OR 嵌套<br>例: or(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;or (name &#x3D; ‘李白’ and status &lt;&gt; ‘活着’)<br>7.27 and</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line">and(boolean condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><p>AND 嵌套<br>例: and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;and (name &#x3D; ‘李白’ and status &lt;&gt; ‘活着’)<br>7.28 nested</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nested(Consumer&lt;Param&gt; consumer)</span><br><span class="line">nested(boolean condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><p>正常嵌套 不带 AND 或者 OR<br>例: nested(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;(name &#x3D; ‘李白’ and status &lt;&gt; ‘活着’)<br>7.29 apply</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply(String applySql, Object... params)</span><br><span class="line">apply(boolean condition, String applySql, Object... params)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拼接 sql<br>注意事项:</p><p>该方法可用于数据库函数动态入参的params对应前面applySql内部的{index}部分，这样是不会有sql注入风险的，反之会有!</p><p>例: apply(“id &#x3D; 1”)—&gt;id &#x3D; 1<br>例: apply(“date_format(dateColumn,‘%Y-%m-%d’) &#x3D; ‘2008-08-08’”)—&gt;date_format(dateColumn,‘%Y-%m-%d’) &#x3D; ‘2008-08-08’“)<br>例: apply(“date_format(dateColumn,‘%Y-%m-%d’) &#x3D; {0}”, “2008-08-08”)—&gt;date_format(dateColumn,‘%Y-%m-%d’) &#x3D; ‘2008-08-08’”)</p><p>7.30 last</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last(String lastSql)</span><br><span class="line">last(boolean condition, String lastSql)</span><br></pre></td></tr></table></figure><p>无视优化规则直接拼接到 sql 的最后<br>注意事项:</p><p>只能调用一次，多次调用以最后一次为准，有sql注入的风险，请谨慎使用</p><p>例: last(“limit 1”)<br>7.31 exists</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists(String existsSql)</span><br><span class="line">exists(boolean condition, String existsSql)</span><br></pre></td></tr></table></figure><p>拼接 EXISTS ( sql语句 )<br>例: exists(“select id from table where age &#x3D; 1”)—&gt;exists (select id from table where age &#x3D; 1)<br>7.32 notExists<br>notExists(String notExistsSql)<br>notExists(boolean condition, String notExistsSql)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">拼接 NOT EXISTS ( sql语句 )</span><br><span class="line">例: notExists(&quot;select id from table where age = 1&quot;)—&gt;not exists (select id from table where age = 1)</span><br></pre></td></tr></table></figure><h3 id="3、mybatis-plus常用插件"><a href="#3、mybatis-plus常用插件" class="headerlink" title="3、mybatis-plus常用插件"></a>3、mybatis-plus常用插件</h3><p>1、分页插件</p><p>添加配置类**<code>MyBatisPlusConfig</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span><br><span class="line">public class MyBatisPlusConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public MybatisPlusInterceptor mybatisPlusInterceptor()&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();</span><br><span class="line">        /*</span><br><span class="line">        添加分页插件</span><br><span class="line">        MybatisPlusInterceptor是一个处理分页查询的拦截器，他的作用是在执行数据库查询之前，根据分页参数对查询进行修改，以返回正确的结果</span><br><span class="line">        DbType.MYSQL是一个枚举值，表示要使用的数据库类型为MySQL。这告诉拦截器要针对MySQL数据库进行分页查询的优化。</span><br><span class="line">       */</span><br><span class="line">        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        return interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testPage()&#123;</span><br><span class="line">    //new Page()中的两个参数分别是当前页码，每页显示数量</span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPage(new Page&lt;&gt;(1, 2), null);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、自定义分页</p><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 根据年龄查询用户列表，分页显示 </span><br><span class="line">  * @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位 </span><br><span class="line">  * @param age 年龄 </span><br><span class="line">  * @return </span><br><span class="line">  */</span><br><span class="line">Page&lt;User&gt; selectPageVo(@Param(&quot;page&quot;) Page&lt;User&gt; page,@Param(&quot;age&quot;) Integer age);</span><br></pre></td></tr></table></figure><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectPageVo&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select id,username as name,age,email from t_user where age &gt; #&#123;age&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testPageVo()&#123;</span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPageVo(new Page&lt;User&gt;(1,2), 20);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、乐观锁和悲观锁</p><blockquote><p><a href="https://blog.csdn.net/weixin_44606481/article/details/138953806">https://blog.csdn.net/weixin_44606481/article/details/138953806</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/zoroly/article/details/131507643">https://blog.csdn.net/zoroly/article/details/131507643</a></p></blockquote><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>1、自定义SQL</p><blockquote><p>几种自定义sql方式<a href="https://blog.csdn.net/qq_20957669/article/details/130396077">https://blog.csdn.net/qq_20957669/article/details/130396077</a></p></blockquote><p>wrapper+xml文件</p><p><img src="C:\Users\saZki\AppData\Roaming\Typora\typora-user-images\image-20240729150738628.png" alt="image-20240729150738628"></p><blockquote><p>mybatis中的#和$</p><blockquote><p><a href="https://blog.csdn.net/yangyou55/article/details/80548116/">https://blog.csdn.net/yangyou55/article/details/80548116/</a></p></blockquote><p>#相当于对数据 加上 双引号，$相当于直接显示数据</p><ol><li><p>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”.</p></li><li><p>$将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id, 如果传入的值是id，则解析成的sql为order by id.</p></li></ol></blockquote><p>2、Service接口</p><p><img src="https://pic1.zhimg.com/v2-65f176e67a98cd620942f586614b22ec_r.jpg" alt="img"></p><p>3.#{}和${}符号的意义和区别</p><p>#{}</p><blockquote><p>1.MyBatis处理 #{ } 占位符，使用的 JDBC 对象是 PreparedStatement 对象，执行sql语句的<strong>效率更高</strong>。<br>2.使用 PreparedStatement 对象，能够避免 sql 注入，使得sql语句的执行更加安全。<br>3.#{ } 常常作为<strong>列值</strong>使用，位于sql语句中等号的右侧；#{ } 位置的值与<strong>数据类型是相关</strong>的。</p></blockquote><p>${}</p><blockquote><p>1.MyBatis处理 ${ } 占位符，使用的 JDBC 对象是 Statement 对象，执行sql语句的<strong>效率相对</strong>于 #{ } 占位符<strong>要更低</strong>。<br>2.${ } 占位符的值，使用的是字符串连接的方式，有 sql 注入的风险，同时也存在代码安全的问题。<br>3.${ } 占位符中的数据是<strong>原模原样</strong>的，<strong>不会区分数据类型</strong>。<br>4.${ } 占位符常用作<strong>表名</strong>或<strong>列名</strong>，这里推荐在能保证数据安全的情况下使用 ${ }。</p></blockquote><p>什么是不区分数据类型</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students=studentDao.queryStudent(&quot;张起灵&quot;);</span><br></pre></td></tr></table></figure><p>转换成对应sql代码<code>select * from student where name=张起灵</code></p><p>查找的字段本应该为varchar类型需要添加&#96;&#96;</p><p>即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students=studentDao.queryStudent(&quot;&#x27;张起灵&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>此时对应sql代码<code>select * from student where name=&#39;张起灵&#39;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
